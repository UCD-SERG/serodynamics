% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_predicted_curve.R
\name{plot_predicted_curve}
\alias{plot_predicted_curve}
\title{Generate Predicted Antibody Response Curves (Median + 95\% CI)}
\usage{
plot_predicted_curve(
  param_medians_wide,
  param_medians_wide2 = NULL,
  dataset = NULL,
  legend_obs = "Observed Data",
  legend_mod1 = "Model 1 Predictions",
  legend_mod2 = "Model 2 Predictions",
  show_quantiles = TRUE,
  log_scale = FALSE,
  log_x = FALSE,
  show_all_curves = FALSE,
  alpha_samples = 0.3
)
}
\arguments{
\item{param_medians_wide}{A tibble with full posterior parameter samples
(first model).}

\item{param_medians_wide2}{(Optional) A tibble with full posterior
parameter samples (second model).
If this tibble contains observed data (with "dayssincefeveronset"),
it will be treated as the observed data, and only one model is plotted.}

\item{dataset}{(Optional) A tibble with observed antibody response data.
Must contain:
\itemize{
\item \code{dayssincefeveronset}
\item \code{result}
\item \code{id}
\item \code{antigen_iso}
}}

\item{legend_obs}{Label for observed data in the legend.}

\item{legend_mod1}{Label for the first model in the legend.}

\item{legend_mod2}{Label for the second model in the legend.}

\item{show_quantiles}{Logical; if TRUE (default), plots the 2.5\%, 50\%,
and 97.5\% quantiles.}

\item{log_scale}{Logical; if TRUE, applies a log10 transformation to
the y-axis.}

\item{log_x}{Logical; if TRUE, applies a log10 transformation to the x-axis.}

\item{show_all_curves}{Logical; if TRUE, overlays all
individual sampled curves.}

\item{alpha_samples}{Numeric; transparency level for individual
curves (default = 0.3).}
}
\value{
A ggplot object displaying predicted antibody response curves
with a median curve and a 95\% credible interval band.
}
\description{
Plots a single median antibody response curve with a 95\% credible interval
ribbon, using full posterior samples. Optionally overlays observed data,
moves the legend to the bottom, provides options to apply log10
transformation on the y- and x-axes, and to show all individual
sampled curves.
}
\examples{
# 1) Prepare the on-the-fly dataset
dataset <- nepal_sees |>
  as_case_data(
    id_var        = "person_id",
    biomarker_var = "antigen_iso",
    value_var     = "value",
    time_in_days  = "timeindays"
  ) |>
  rename(
    strat      = bldculres,
    timeindays = dayssincefeveronset,
    value      = result
  )

# 2) Extract just the one subject/antigen for overlay later
dat <- dataset |>
  filter(id == "sees_npl_128", antigen_iso == "HlyE_IgA")

# 3) Fit the model to the full dataset
model <- run_mod(
  data         = dataset,
  file_mod     = serodynamics_example("model.jags"),
  nchain       = 2,
  nadapt       = 100,
  nburn        = 100,
  nmc          = 500,
  niter        = 1000,
  strat        = "strat",
  include_subs = TRUE
)

# 4) Pull out the full MCMC samples for that one ID + antigen
full_samples <- process_jags_samples(
  jags_post   = model,
  dataset     = dataset,
  id          = "sees_npl_128",
  antigen_iso = "HlyE_IgA"
)

# 5a) Plot (linear axes) with all individual curves + median ribbon
p1 <- plot_predicted_curve(
  param_medians_wide = full_samples,
  dat                = dat,
  legend_obs         = "Observed Data",
  legend_mod1        = "Full Model Predictions",
  show_quantiles     = TRUE,
  log_scale          = FALSE,
  log_x              = FALSE,
  show_all_curves    = TRUE
)
print(p1)

# 5b) Plot (log10 y-axis) with all individual curves + median ribbon
p2 <- plot_predicted_curve(
  param_medians_wide = full_samples,
  dat                = dat,
  legend_obs         = "Observed Data",
  legend_mod1        = "Full Model Predictions",
  show_quantiles     = TRUE,
  log_scale          = TRUE,
  log_x              = FALSE,
  show_all_curves    = TRUE
)
print(p2)
}
