% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_predicted_curve.R
\name{plot_predicted_curve}
\alias{plot_predicted_curve}
\title{Generate Predicted Antibody Response Curves (Median + 95\% CI)}
\usage{
plot_predicted_curve(
  jags_post,
  id,
  antigen_iso,
  dataset = NULL,
  legend_obs = "Observed data",
  legend_mod1 = "Median prediction",
  show_quantiles = TRUE,
  log_scale = FALSE,
  log_x = FALSE,
  show_all_curves = FALSE,
  alpha_samples = 0.3,
  xlim = NULL
)
}
\arguments{
\item{jags_post}{A \link[dplyr:tbl_df]{dplyr::tbl_df} returned by \code{run_mod(...)} containing the
full posterior parameter samples.}

\item{id}{The original subject ID (e.g. "sees_npl_128") to extract.}

\item{antigen_iso}{The antigen to extract, e.g. "HlyE_IgA" or "HlyE_IgG".}

\item{dataset}{(Optional) A tibble with observed antibody response data.
Must contain:
\itemize{
\item \code{timeindays}
\item \code{value}
\item \code{id}
\item \code{antigen_iso}
}}

\item{legend_obs}{Label for observed data in the legend.}

\item{legend_mod1}{Label for the median prediction line.}

\item{show_quantiles}{logical; if TRUE (default), plots the 2.5\%, 50\%,
and 97.5\% quantiles.}

\item{log_scale}{logical; if TRUE, applies a log10 transformation to
the y-axis.}

\item{log_x}{\link{logical}; if TRUE, applies a log10 transformation to the
x-axis.}

\item{show_all_curves}{logical; if TRUE, overlays all
individual sampled curves.}

\item{alpha_samples}{Numeric; transparency level for individual
curves (default = 0.3).}

\item{xlim}{(Optional) A numeric vector of length 2 providing custom x-axis
limits.}
}
\value{
A \link[ggplot2:ggplot]{ggplot2::ggplot} object displaying predicted antibody response
curves with a median curve and a 95\% credible interval band as default.
}
\description{
Plots a median antibody response curve with a 95\% credible interval
ribbon, using full posterior samples. Optionally overlays observed data,
moves the legend to the bottom, provides options to apply log10
transformation on the y- and x-axes, and to show all individual
sampled curves.
}
\examples{
# 1) Prepare the on-the-fly dataset
dataset <- serodynamics::nepal_sees |>
  as_case_data(
    id_var        = "id",
    biomarker_var = "antigen_iso",
    value_var     = "value",
    time_in_days  = "timeindays"
  ) |>
  dplyr::rename(
    strat      = bldculres,
    timeindays = dayssincefeveronset,
    value      = result
  )

# 2) Extract just the one subject/antigen for overlay later
dat <- dataset |>
  dplyr::filter(id == "sees_npl_128", antigen_iso == "HlyE_IgA")

# 3) Fit the model to the full dataset
model <- run_mod(
  data         = dataset,
  file_mod     = serodynamics_example("model.jags"),
  nchain       = 2,
  nadapt       = 100,
  nburn        = 100,
  nmc          = 500,
  niter        = 1000,
  strat        = "strat",
  with_post    = TRUE
)

# 4a) Plot (linear axes) with all individual curves + median ribbon
p1 <- plot_predicted_curve(
  jags_post          = model,
  id                 = "sees_npl_128",
  antigen_iso        = "HlyE_IgA",
  dataset            = dat,
  legend_obs         = "Observed data",
  legend_mod1        = "Median prediction",
  show_quantiles     = TRUE,
  log_scale          = FALSE,
  log_x              = FALSE,
  show_all_curves    = TRUE
)
print(p1)

# 4b) Plot (log10 y-axis) with all individual curves + median ribbon
p2 <- plot_predicted_curve(
  jags_post          = model,
  id                 = "sees_npl_128",
  antigen_iso        = "HlyE_IgA",
  dataset            = dat,
  legend_obs         = "Observed data",
  legend_mod1        = "Median prediction",
  show_quantiles     = TRUE,
  log_scale          = TRUE,
  log_x              = FALSE,
  show_all_curves    = TRUE
)
print(p2)

# 4c) Plot with custom x-axis limits (0-600 days)
p3 <- plot_predicted_curve(
  jags_post          = model,
  id                 = "sees_npl_128",
  antigen_iso        = "HlyE_IgA",
  dataset            = dat,
  legend_obs         = "Observed data",
  legend_mod1        = "Median prediction",
  show_quantiles     = TRUE,
  log_scale          = FALSE,
  log_x              = FALSE,
  show_all_curves    = TRUE,
  xlim               = c(0, 600)
)
print(p3)
}
