[{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to this project","title":"Contributing to this project","text":"document outlines propose change project. detailed discussion contributing packages, please see tidyverse’s development contributing guide code review principles.","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to this project","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to this project","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See tidyverse guide create great issue advice.","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to this project","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"UCD-SERG/serodynamics\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. changes conform tidyverse code style guidelines design principles described . user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html. GitHub automatically check PR see package still functional Mac OS, Windows, Linux; , receive email describing problems. help decoding errors, try resource: https://github.com/r-lib/actions?tab=readme-ov-file#--find-help.","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/CONTRIBUTING.html","id":"sec-code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to this project","text":"New code follow tidyverse style guide design principles. can use lintr package automatically check style design issues styler package automatically correct issues. Please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to this project","text":"Please note serodynamics project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 project authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/articles/Chapter2.html","id":"current-model-what-we-already-fit","dir":"Articles","previous_headings":"","what":"Current Model (what we already fit)","title":"Chapter 2 — Fake Data First, Then Fit","text":"Chapter 1 model fits subject-level parameters biomarker (y0,t1,y1,α,ρ)(y_0, t_1, y_1, \\alpha, \\rho). Within biomarker: variation captured covariance (ΣP)(\\Sigma_P). Across biomarkers: independence (block-diagonal), .e. Cov(vec(Θi))=ΣP⊗IB \\mathrm{Cov}\\!\\big(\\mathrm{vec}(\\Theta_i)\\big) = \\Sigma_P \\otimes I_B","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/articles/Chapter2.html","id":"step-a-set-up","dir":"Articles","previous_headings":"","what":"Step A — Set up","title":"Chapter 2 — Fake Data First, Then Fit","text":"","code":"set.seed(123) library(tidyverse) library(mvtnorm)   # rmvnorm library(Matrix)    # kronecker library(serodynamics)"},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/articles/Chapter2.html","id":"step-b-minimal-helpers","dir":"Articles","previous_headings":"","what":"Step B — Minimal helpers","title":"Chapter 2 — Fake Data First, Then Fit","text":"","code":"## 1) SIMULATOR: make fake longitudinal data with known ΣP and ΣB # Two-phase kinetics (rise -> decay) two_phase_y <- function(t, y0, y1, t1, alpha, rho){   beta <- log(y1 / y0) / t1   ifelse(     t <= t1,     y0 * exp(beta * t),     {       term <- 1 + (rho - 1) * alpha * y1^(rho - 1) * (t - t1)       term <- pmax(term, 1e-12)       y1 * term^(-1/(rho - 1))     }   ) }  # simulator version1 simulate_multiB_long <- function(n_id, B, time_grid, Sigma_P, Sigma_B,                                  mu_latent_base = c(log(1.0),  # log y0                                                     log(5.0),  # log(y1 - y0)                                                     log(30),   # log t1                                                     log(0.02), # log alpha                                                     log(1.5)), # log(rho - 1)                                  meas_sd = rep(0.22, B)) {   stopifnot(all(dim(Sigma_P) == c(5,5)), all(dim(Sigma_B) == c(B,B)))   Sigma_total <- kronecker(Sigma_B, Sigma_P)   # Σ_total = ΣB ⊗ ΣP    # Per-biomarker means on latent scale (keep simple: same base for all B)   M_true <- matrix(rep(mu_latent_base, B), nrow = 5, ncol = B)   vec_M  <- as.vector(M_true)                  # length 5B    # Draw person-level latent parameters (length 5B each), reshape to 5×B   Theta_latent <- mvtnorm::rmvnorm(n_id, vec_M, Sigma_total)    dat <- map_dfr(1:n_id, function(i){     mat <- matrix(Theta_latent[i,], nrow = 5, ncol = B)     rownames(mat) <- c(\"log_y0\",\"log_y1m0\",\"log_t1\",\"log_alpha\",\"log_rho_m1\")     tibble(biomarker = paste0(\"bm\", 1:B),            log_y0 = mat[1,], log_y1m0 = mat[2,],            log_t1 = mat[3,], log_alpha = mat[4,],            log_rho_m1 = mat[5,]) |>       mutate(y0 = exp(log_y0),              y1 = y0 + exp(log_y1m0),              t1 = exp(log_t1),              alpha = exp(log_alpha),              rho = exp(log_rho_m1) + 1,              Subject = as.character(i)) |>       crossing(visit_num = seq_along(time_grid), time_days = time_grid) |>       mutate(         y_true    = two_phase_y(time_days, y0, y1, t1, alpha, rho),         logy_true = log(pmax(y_true, 1e-12)),         logy_obs  = logy_true + rnorm(n(), 0, meas_sd[as.integer(factor(biomarker, levels = paste0(\"bm\",1:B)))]),         value     = exp(logy_obs)               # raw (positive), not logged       ) |>       select(Subject, visit_num, antigen_iso = biomarker, time_days, value)   })    list(     data = dat,     truth = list(M_true = M_true, Sigma_P = Sigma_P, Sigma_B = Sigma_B,                  Sigma_total = Sigma_total, meas_sd = meas_sd,                  Theta_latent = Theta_latent)   ) }  ## 2) SIMULATOR:   ab_vec <- Vectorize(   function(t, y0, y1, t1, alpha, shape)     serodynamics:::ab(t, y0, y1, t1, alpha, shape),   vectorize.args = c(\"t\",\"y0\",\"y1\",\"t1\",\"alpha\",\"shape\") )  # Simulator version2: uses serodynamics:::ab  simulate_multiB_long2 <- function(   n_id, B, time_grid, Sigma_P, Sigma_B,   mu_latent_base = c(log(1.0),  # log y0                      log(5.0),   # log(y1 - y0)                      log(30),    # log t1                      log(0.02),  # log alpha                      log(1.5)),  # log(rho - 1)   meas_sd = rep(0.22, B) ){   stopifnot(all(dim(Sigma_P) == c(5, 5)),             all(dim(Sigma_B) == c(B, B)))    # Σ_total = ΣB ⊗ ΣP (dimension 5B x 5B)   Sigma_total <- kronecker(Sigma_B, Sigma_P)    # Per-biomarker means on latent scale (same base across B for simplicity)   M_true <- matrix(rep(mu_latent_base, B), nrow = 5, ncol = B)   vec_M  <- as.vector(M_true)  # length 5B    # Draw person-level latent parameters (each length 5B), then reshape to 5×B   Theta_latent <- mvtnorm::rmvnorm(n_id, mean = vec_M, sigma = Sigma_total)    # Safety: ensure meas_sd has length B   if (length(meas_sd) == 1L) meas_sd <- rep(meas_sd, B)   stopifnot(length(meas_sd) == B)    dat <- purrr::map_dfr(seq_len(n_id), function(i){     mat <- matrix(Theta_latent[i, ], nrow = 5, ncol = B)     tibble::tibble(       biomarker   = paste0(\"bm\", seq_len(B)),       log_y0      = mat[1, ],       log_y1m0    = mat[2, ],       log_t1      = mat[3, ],       log_alpha   = mat[4, ],       log_rho_m1  = mat[5, ]     ) |>       dplyr::mutate(         y0    = exp(log_y0),         y1    = y0 + exp(log_y1m0),         t1    = exp(log_t1),         alpha = exp(log_alpha),         rho   = exp(log_rho_m1) + 1,         # shape = rho         Subject = as.character(i)       ) |>       tidyr::crossing(         visit_num = seq_along(time_grid),         time_days = time_grid       ) |>       dplyr::mutate(         # Use ab_vec pass rho as `shape`         y_true = ab_vec(           t      = time_days,           y0     = y0,           y1     = y1,           t1     = t1,           alpha  = alpha,           shape  = rho         ),         logy_true = log(pmax(y_true, 1e-12)),         bm_idx    = as.integer(sub(\"^bm\", \"\", biomarker)),         logy_obs  = logy_true + stats::rnorm(dplyr::n(), mean = 0, sd = meas_sd[bm_idx]),         value     = exp(logy_obs)       ) |>       dplyr::select(Subject, visit_num, antigen_iso = biomarker, time_days, value)   })    list(     data  = dat,     truth = list(       M_true       = M_true,       Sigma_P      = Sigma_P,       Sigma_B      = Sigma_B,       Sigma_total  = Sigma_total,       meas_sd      = meas_sd,       Theta_latent = Theta_latent     )   ) }"},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/articles/Chapter2.html","id":"step-c-choose-a-truth-and-simulate-fake-data","dir":"Articles","previous_headings":"","what":"Step C — Choose a “truth” and simulate fake data","title":"Chapter 2 — Fake Data First, Then Fit","text":"","code":"# Choose B biomarkers and visit schedule B <- 3 time_grid <- c(0, 7, 14, 30, 90, 180, 365)  # True ΣP (5×5): mild positive correlation among the five latent parameters sd_P <- c(0.35, 0.45, 0.25, 0.30, 0.25) R_P  <- matrix(0.25, 5, 5); diag(R_P) <- 1 Sigma_P <- diag(sd_P) %*% R_P %*% diag(sd_P)  # True ΣB (B×B): cross-biomarker correlation R_B <- matrix(c( 1, 0.5, 0.3,                  0.5, 1, 0.4,                  0.3, 0.4, 1), B, B, byrow = TRUE) sd_B <- rep(0.6, B) Sigma_B <- diag(sd_B) %*% R_B %*% diag(sd_B)  sim <- simulate_multiB_long(   n_id = 24, B = B, time_grid = time_grid,   Sigma_P = Sigma_P, Sigma_B = Sigma_B )  sim2 <- simulate_multiB_long2(   n_id = 24, B = B, time_grid = time_grid,   Sigma_P = Sigma_P, Sigma_B = Sigma_B )  # This long table already matches prep_data() expectations:  sim$data |> dplyr::slice_head(n = 8) sim2$data |> dplyr::slice_head(n = 8)"},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/articles/Chapter2.html","id":"step-d-fit-the-independence-model","dir":"Articles","previous_headings":"","what":"Step D — Fit the independence model","title":"Chapter 2 — Fake Data First, Then Fit","text":"","code":"# If our package is loaded, this is all we need:  sim_tbl <- serodynamics::as_case_data(   sim$data,   id_var        = \"Subject\",   biomarker_var = \"antigen_iso\",   value_var     = \"value\",   time_in_days  = \"time_days\" )  prepped <- prep_data(sim_tbl) priors  <- prep_priors(max_antigens = prepped$n_antigen_isos) fit_v0  <- run_mod(  data     = sim_tbl,  file_mod = serodynamics_example(\"model.jags\"),  # our current model  nchain = 4, nadapt = 1000, nburn = 500, nmc = 500, niter = 5000,  strat = NA, with_post = TRUE  )  fit_v0"},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/articles/Chapter2.html","id":"step-e-prepare-for-correlated-model","dir":"Articles","previous_headings":"","what":"Step E — Prepare for Correlated Model","title":"Chapter 2 — Fake Data First, Then Fit","text":"Step D fit “independence” model: biomarker covariance 5 parameters, biomarkers assumed independent. Now allow correlations across biomarkers well within biomarkers. Mathematically, replace block-diagonal assumption Kronecker structure: Cov(vec(Θi))=ΣP⊗ΣB \\mathrm{Cov}\\!\\big(\\mathrm{vec}(\\Theta_i)\\big)    = \\Sigma_P \\otimes \\Sigma_B ΣP\\Sigma_P = covariance 5 parameters (y0,y1,t1,α,ρ)(y_0, y_1, t_1, \\alpha, \\rho) within biomarker. ΣB\\Sigma_B = covariance across biomarkers. Kronecker product ⊗\\otimes builds 5B×5B5B \\times 5B covariance. Define priors ΣP\\Sigma_P ΣB\\Sigma_B separately (via Wishart distributions). Build Kronecker precision matrix T=TB⊗TP\\text{T} = \\text{T}_B \\otimes \\text{T}_P inside JAGS. Draw subject’s stacked parameter vector multivariate prior. Likelihood observed antibody data unchanged — prior covariance differs. define helper function prep_priors_multiB() sets priors ΣP\\Sigma_P (within-biomarker) ΣB\\Sigma_B (across-biomarkers). TP∼Wishart(ΩP,νP)\\text{T}_P \\sim \\text{Wishart}(\\Omega_P, \\nu_P) TB∼Wishart(ΩB,νB)\\text{T}_B \\sim \\text{Wishart}(\\Omega_B, \\nu_B) Kronecker precision: T=TB⊗TP\\text{T} = \\text{T}_B \\otimes \\text{T}_P model.jags one conceptual change: instead independent par[subj,b,]∼𝒩(μ.par[b,],prec.par[b,,]) par[\\text{subj},\\text{b},] \\sim \\mathcal{N}( \\mu.par[\\text{b},], \\ \\text{prec.par}[\\text{b},,] )  b cur_antigen_iso draw biomarkers subject Kronecker precision: vec(parsubj,⋅,⋅)∼𝒩(vec(μpar),TB⊗TP). \\mathrm{vec}(par_{\\text{subj},\\cdot,\\cdot}) \\sim \\mathcal{N}\\!\\big( \\mathrm{vec}(\\mu_{par}), \\ \\text{T}_B \\otimes \\text{T}_P \\big). Everything else (transforms, likelihood, measurement precisions) stays . keep hyperpriors mu.par (per-biomarker means), plugs right current prep_priors(). new model.jags rename model_ch2_kron.jags Removed per-biomarker prec.par[cur_antigen_iso,,] ~ dwish(...) par[subj,cur_antigen_iso,] ~ dmnorm(mu.par[cur_antigen_iso,], prec.par[cur_antigen_iso,,]). Replaced one prior per subject stacked vector using T=TB⊗TP\\text{T} = \\text{T}_B \\otimes \\text{T}_P Kept mu.par prior likelihood exactly .","code":"prep_priors_multiB <- function(B,                                OmegaP_scale = rep(0.1, 5), nuP = 6,                                OmegaB_scale = rep(1.0, B), nuB = B + 1,                                mu_hyp_param = c(1.0, 7.0, 1.0, -4.0, -1.0)) {   list(     OmegaP = diag(OmegaP_scale, 5),   # scale for parameter covariance     nuP    = nuP,                     # df for Wishart on TauP     OmegaB = diag(OmegaB_scale, B),   # scale for biomarker covariance     nuB    = nuB,                     # df for Wishart on TauB     mu.par = matrix(rep(mu_hyp_param, each = B), nrow = B, ncol = 5,                     dimnames = list(NULL, c(\"y0\",\"y1\",\"t1\",\"alpha\",\"shape\")))   ) } # A safe initializer that accepts chain and never sets TauB/TauP  initsfunction <- function(chain) {   list(     .RNG.name = \"base::Mersenne-Twister\",     .RNG.seed = 123 + chain   ) }  inits_kron <- function(chain) {   z <- initsfunction(chain)   # call with chain argument   z$TauB <- NULL              # remove if present   z$TauP <- NULL   z$prec.par <- NULL          # old per-biomarker precision (not used now)   z }  # Clean base priors to avoid unused legacy parts (omega/wishdf) clean_priors <- function(x) {   drop <- intersect(names(x), c(\"omega\",\"wishdf\",\"Omega\",\"WishDF\",\"prec.par\"))   if (length(drop)) x <- x[setdiff(names(x), drop)]   x } # --- E.2: Write the new JAGS file once (beta defined outside obs loop) --- write_model_ch2_kron <- function(path = \"model_ch2_kron.jags\"){   cat(' model {    # ----------------------------   # Hyperpriors for population means (same as model.jags)   # ----------------------------   for (b in 1:B) {     mu.par[b, 1:n_params] ~ dmnorm(mu.hyp[b, ], prec.hyp[b, , ])   }    # ----------------------------   # Wishart priors for Kronecker precision (new)   # ----------------------------   TauP[1:5,1:5] ~ dwish(OmegaP[1:5,1:5], nuP)             # within-biomarker   TauB[1:B,1:B] ~ dwish(OmegaB[1:B,1:B], nuB)             # across biomarkers    # Build Tau = TauB ⊗ TauP  (dimension: (5*B) x (5*B))   for (b1 in 1:B) {     for (b2 in 1:B) {       for (p1 in 1:5) {         for (p2 in 1:5) {           Tau[(b1-1)*5 + p1, (b2-1)*5 + p2] <- TauB[b1,b2] * TauP[p1,p2]         }       }     }   }    # Vectorized mean (stack mu.par across biomarkers)   for (b in 1:B) {     for (p in 1:5) {       mu_vec[(b-1)*5 + p] <- mu.par[b,p]     }   }    # ----------------------------   # Subject-level prior: one big MVN per subject   # ----------------------------   for (subj in 1:nsubj) {     par_vec[subj, 1:(5*B)] ~ dmnorm(mu_vec[1:(5*B)], Tau[ , ])      # Unstack back to par[subj, biomarker, param]     for (b in 1:B) {       for (p in 1:5) {         par[subj, b, p] <- par_vec[subj, (b-1)*5 + p]       }     }      # Transforms to natural scale     for (b in 1:B) {       y0[subj,b]    <- exp(par[subj,b,1])       y1[subj,b]    <- y0[subj,b] + exp(par[subj,b,2])    # log(y1-y0)       t1[subj,b]    <- exp(par[subj,b,3])       alpha[subj,b] <- exp(par[subj,b,4])       shape[subj,b] <- exp(par[subj,b,5]) + 1     }      # Likelihood     for (obs in 1:nsmpl[subj]) {       for (b in 1:B) {         beta_tmp[subj,b] <- log(y1[subj,b] / y0[subj,b]) / t1[subj,b]         mu.logy[subj,obs,b] <- ifelse(           step(t1[subj,b] - smpl.t[subj,obs]),           log(y0[subj,b]) + beta_tmp[subj,b] * smpl.t[subj,obs],           (1/(1-shape[subj,b])) * log( y1[subj,b]^(1-shape[subj,b]) -                (1-shape[subj,b]) * alpha[subj,b] * (smpl.t[subj,obs] - t1[subj,b]) )         )         logy[subj,obs,b] ~ dnorm(mu.logy[subj,obs,b], prec.logy[b])       }     }   }    # Measurement precisions   for (b in 1:B) {     prec.logy[b] ~ dgamma(prec.logy.hyp[b,1], prec.logy.hyp[b,2])   } } ', file = path)   invisible(path) } # --- E.3: Minimal wrapper (with flexible monitor list) --- run_mod_kron <- function(data,                          file_mod = \"model_ch2_kron.jags\",                          nchain = 4, nadapt = 0, nburn = 0,                          nmc = 100, niter = 100,                          strat = NA, with_post = FALSE,                          monitor = c(\"y0\",\"y1\",\"t1\",\"alpha\",\"shape\",\"TauB\",\"TauP\"),                          ...) {    if (is.na(strat)) {     strat_list <- \"None\"   } else {     strat_list <- unique(data[[strat]])   }    jags_out <- data.frame(     Iteration=NA, Chain=NA, Parameter=NA, value=NA,     Parameter_sub=NA, Subject=NA, Iso_type=NA, Stratification=NA   )   jags_post_final <- list()    for (i in strat_list) {      dl_sub <- if (is.na(strat)) data else dplyr::filter(data, .data[[strat]] == i)      longdata    <- prep_data(dl_sub)     base_priors <- prep_priors(max_antigens = longdata$n_antigen_isos, ...)     base_priors <- clean_priors(base_priors)                  # << NEW     kron_priors <- prep_priors_multiB(B = longdata$n_antigen_isos)      # Add scalar B expected by the model     B_scalar <- list(B = longdata$n_antigen_isos)      priorspec <- c(base_priors, kron_priors, B_scalar)      nchains <- nchain; nadapt <- nadapt; nburnin <- nburn     nmc <- nmc; niter <- niter; nthin <- round(niter / nmc)      monitor_kron <- monitor      jags_post <- runjags::run.jags(       model     = file_mod,       data      = c(longdata, priorspec),       inits     = inits_kron,                      # << NEW       method    = \"parallel\",       adapt     = nadapt, burnin = nburnin, thin = nthin,       sample    = nmc, n.chains = nchains,       monitor   = monitor_kron,       summarise = FALSE     )     jags_post_final[[i]] <- jags_post      jags_unpack <- ggmcmc::ggs(jags_post[[\"mcmc\"]])     mod_atts <- attributes(jags_unpack)[4:8]      iso_dat <- data.frame(attributes(longdata)$antigens) |>       dplyr::mutate(Subnum = as.numeric(row.names(.)))     jags_unpack <- jags_unpack |>       dplyr::mutate(         Subnum = sub(\".*,\", \"\", .data$Parameter),         Parameter_sub = sub(\"\\\\[.*\", \"\", .data$Parameter),         Subject = sub(\"\\\\,.*\", \"\", .data$Parameter)       ) |>       dplyr::mutate(         Subnum = as.numeric(sub(\"\\\\].*\", \"\", .data$Subnum)),         Subject = sub(\".*\\\\[\", \"\", .data$Subject)       ) |>       dplyr::left_join(iso_dat, by = \"Subnum\")      ids <- data.frame(attr(longdata, \"ids\")) |>       dplyr::mutate(Subject = as.character(dplyr::row_number()))      jags_final <- jags_unpack |>       dplyr::left_join(ids, by = \"Subject\") |>       dplyr::select(!c(\"Subnum\", \"Subject\")) |>       dplyr::rename(         Iso_type = \"attributes.longdata..antigens\",         Subject  = \"attr.longdata...ids..\"       )      jags_final$Stratification <- i     jags_out <- data.frame(rbind(jags_out, jags_final))   }    jags_out <- jags_out[complete.cases(jags_out), ]   jags_out <- dplyr::as_tibble(jags_out) |>     dplyr::select(!c(\"Parameter\")) |>     dplyr::rename(\"Parameter\" = \"Parameter_sub\") |>     dplyr::relocate(Iteration, Chain, Parameter, Iso_type, Stratification, Subject, value)    attributes(jags_out) <- c(attributes(jags_out), mod_atts)    # attach priors used (from last stratum)   jags_out <- jags_out |> structure(\"priors\" = attributes(priorspec)$used_priors)    fit_res <- calc_fit_mod(modeled_dat = jags_out, original_data = dl_sub)   jags_out <- jags_out |> structure(fitted_residuals = fit_res)    if (with_post) jags_out <- jags_out |> structure(jags.post = jags_post_final)    class(jags_out) <- union(\"sr_model\", class(jags_out))   jags_out }"},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/articles/Chapter2.html","id":"e-1-priors-for-the-correlated-model","dir":"Articles","previous_headings":"","what":"E.1 Priors for the Correlated Model","title":"Chapter 2 — Fake Data First, Then Fit","text":"define helper function prep_priors_multiB() sets priors ΣP\\Sigma_P (within-biomarker) ΣB\\Sigma_B (across-biomarkers). TP∼Wishart(ΩP,νP)\\text{T}_P \\sim \\text{Wishart}(\\Omega_P, \\nu_P) TB∼Wishart(ΩB,νB)\\text{T}_B \\sim \\text{Wishart}(\\Omega_B, \\nu_B) Kronecker precision: T=TB⊗TP\\text{T} = \\text{T}_B \\otimes \\text{T}_P","code":"prep_priors_multiB <- function(B,                                OmegaP_scale = rep(0.1, 5), nuP = 6,                                OmegaB_scale = rep(1.0, B), nuB = B + 1,                                mu_hyp_param = c(1.0, 7.0, 1.0, -4.0, -1.0)) {   list(     OmegaP = diag(OmegaP_scale, 5),   # scale for parameter covariance     nuP    = nuP,                     # df for Wishart on TauP     OmegaB = diag(OmegaB_scale, B),   # scale for biomarker covariance     nuB    = nuB,                     # df for Wishart on TauB     mu.par = matrix(rep(mu_hyp_param, each = B), nrow = B, ncol = 5,                     dimnames = list(NULL, c(\"y0\",\"y1\",\"t1\",\"alpha\",\"shape\")))   ) } # A safe initializer that accepts chain and never sets TauB/TauP  initsfunction <- function(chain) {   list(     .RNG.name = \"base::Mersenne-Twister\",     .RNG.seed = 123 + chain   ) }  inits_kron <- function(chain) {   z <- initsfunction(chain)   # call with chain argument   z$TauB <- NULL              # remove if present   z$TauP <- NULL   z$prec.par <- NULL          # old per-biomarker precision (not used now)   z }  # Clean base priors to avoid unused legacy parts (omega/wishdf) clean_priors <- function(x) {   drop <- intersect(names(x), c(\"omega\",\"wishdf\",\"Omega\",\"WishDF\",\"prec.par\"))   if (length(drop)) x <- x[setdiff(names(x), drop)]   x }"},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/articles/Chapter2.html","id":"e-2-write-the-new-jags-model-file-kronecker-precision","dir":"Articles","previous_headings":"","what":"E.2 Write the new JAGS model file (Kronecker precision)","title":"Chapter 2 — Fake Data First, Then Fit","text":"model.jags one conceptual change: instead independent par[subj,b,]∼𝒩(μ.par[b,],prec.par[b,,]) par[\\text{subj},\\text{b},] \\sim \\mathcal{N}( \\mu.par[\\text{b},], \\ \\text{prec.par}[\\text{b},,] )  b cur_antigen_iso draw biomarkers subject Kronecker precision: vec(parsubj,⋅,⋅)∼𝒩(vec(μpar),TB⊗TP). \\mathrm{vec}(par_{\\text{subj},\\cdot,\\cdot}) \\sim \\mathcal{N}\\!\\big( \\mathrm{vec}(\\mu_{par}), \\ \\text{T}_B \\otimes \\text{T}_P \\big). Everything else (transforms, likelihood, measurement precisions) stays . keep hyperpriors mu.par (per-biomarker means), plugs right current prep_priors(). new model.jags rename model_ch2_kron.jags Removed per-biomarker prec.par[cur_antigen_iso,,] ~ dwish(...) par[subj,cur_antigen_iso,] ~ dmnorm(mu.par[cur_antigen_iso,], prec.par[cur_antigen_iso,,]). Replaced one prior per subject stacked vector using T=TB⊗TP\\text{T} = \\text{T}_B \\otimes \\text{T}_P Kept mu.par prior likelihood exactly .","code":"# --- E.2: Write the new JAGS file once (beta defined outside obs loop) --- write_model_ch2_kron <- function(path = \"model_ch2_kron.jags\"){   cat(' model {    # ----------------------------   # Hyperpriors for population means (same as model.jags)   # ----------------------------   for (b in 1:B) {     mu.par[b, 1:n_params] ~ dmnorm(mu.hyp[b, ], prec.hyp[b, , ])   }    # ----------------------------   # Wishart priors for Kronecker precision (new)   # ----------------------------   TauP[1:5,1:5] ~ dwish(OmegaP[1:5,1:5], nuP)             # within-biomarker   TauB[1:B,1:B] ~ dwish(OmegaB[1:B,1:B], nuB)             # across biomarkers    # Build Tau = TauB ⊗ TauP  (dimension: (5*B) x (5*B))   for (b1 in 1:B) {     for (b2 in 1:B) {       for (p1 in 1:5) {         for (p2 in 1:5) {           Tau[(b1-1)*5 + p1, (b2-1)*5 + p2] <- TauB[b1,b2] * TauP[p1,p2]         }       }     }   }    # Vectorized mean (stack mu.par across biomarkers)   for (b in 1:B) {     for (p in 1:5) {       mu_vec[(b-1)*5 + p] <- mu.par[b,p]     }   }    # ----------------------------   # Subject-level prior: one big MVN per subject   # ----------------------------   for (subj in 1:nsubj) {     par_vec[subj, 1:(5*B)] ~ dmnorm(mu_vec[1:(5*B)], Tau[ , ])      # Unstack back to par[subj, biomarker, param]     for (b in 1:B) {       for (p in 1:5) {         par[subj, b, p] <- par_vec[subj, (b-1)*5 + p]       }     }      # Transforms to natural scale     for (b in 1:B) {       y0[subj,b]    <- exp(par[subj,b,1])       y1[subj,b]    <- y0[subj,b] + exp(par[subj,b,2])    # log(y1-y0)       t1[subj,b]    <- exp(par[subj,b,3])       alpha[subj,b] <- exp(par[subj,b,4])       shape[subj,b] <- exp(par[subj,b,5]) + 1     }      # Likelihood     for (obs in 1:nsmpl[subj]) {       for (b in 1:B) {         beta_tmp[subj,b] <- log(y1[subj,b] / y0[subj,b]) / t1[subj,b]         mu.logy[subj,obs,b] <- ifelse(           step(t1[subj,b] - smpl.t[subj,obs]),           log(y0[subj,b]) + beta_tmp[subj,b] * smpl.t[subj,obs],           (1/(1-shape[subj,b])) * log( y1[subj,b]^(1-shape[subj,b]) -                (1-shape[subj,b]) * alpha[subj,b] * (smpl.t[subj,obs] - t1[subj,b]) )         )         logy[subj,obs,b] ~ dnorm(mu.logy[subj,obs,b], prec.logy[b])       }     }   }    # Measurement precisions   for (b in 1:B) {     prec.logy[b] ~ dgamma(prec.logy.hyp[b,1], prec.logy.hyp[b,2])   } } ', file = path)   invisible(path) }"},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/articles/Chapter2.html","id":"what-changed-vs--our-current-model-jags","dir":"Articles","previous_headings":"6 Step E — Prepare for Correlated Model","what":"What changed vs. our current model.jags","title":"Chapter 2 — Fake Data First, Then Fit","text":"Removed per-biomarker prec.par[cur_antigen_iso,,] ~ dwish(...) par[subj,cur_antigen_iso,] ~ dmnorm(mu.par[cur_antigen_iso,], prec.par[cur_antigen_iso,,]). Replaced one prior per subject stacked vector using T=TB⊗TP\\text{T} = \\text{T}_B \\otimes \\text{T}_P Kept mu.par prior likelihood exactly .","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/articles/Chapter2.html","id":"e-3-minimal-wrapper-so-we-can-keep-calling-one-function","dir":"Articles","previous_headings":"","what":"E.3: Minimal wrapper so we can keep calling one function","title":"Chapter 2 — Fake Data First, Then Fit","text":"","code":"# --- E.3: Minimal wrapper (with flexible monitor list) --- run_mod_kron <- function(data,                          file_mod = \"model_ch2_kron.jags\",                          nchain = 4, nadapt = 0, nburn = 0,                          nmc = 100, niter = 100,                          strat = NA, with_post = FALSE,                          monitor = c(\"y0\",\"y1\",\"t1\",\"alpha\",\"shape\",\"TauB\",\"TauP\"),                          ...) {    if (is.na(strat)) {     strat_list <- \"None\"   } else {     strat_list <- unique(data[[strat]])   }    jags_out <- data.frame(     Iteration=NA, Chain=NA, Parameter=NA, value=NA,     Parameter_sub=NA, Subject=NA, Iso_type=NA, Stratification=NA   )   jags_post_final <- list()    for (i in strat_list) {      dl_sub <- if (is.na(strat)) data else dplyr::filter(data, .data[[strat]] == i)      longdata    <- prep_data(dl_sub)     base_priors <- prep_priors(max_antigens = longdata$n_antigen_isos, ...)     base_priors <- clean_priors(base_priors)                  # << NEW     kron_priors <- prep_priors_multiB(B = longdata$n_antigen_isos)      # Add scalar B expected by the model     B_scalar <- list(B = longdata$n_antigen_isos)      priorspec <- c(base_priors, kron_priors, B_scalar)      nchains <- nchain; nadapt <- nadapt; nburnin <- nburn     nmc <- nmc; niter <- niter; nthin <- round(niter / nmc)      monitor_kron <- monitor      jags_post <- runjags::run.jags(       model     = file_mod,       data      = c(longdata, priorspec),       inits     = inits_kron,                      # << NEW       method    = \"parallel\",       adapt     = nadapt, burnin = nburnin, thin = nthin,       sample    = nmc, n.chains = nchains,       monitor   = monitor_kron,       summarise = FALSE     )     jags_post_final[[i]] <- jags_post      jags_unpack <- ggmcmc::ggs(jags_post[[\"mcmc\"]])     mod_atts <- attributes(jags_unpack)[4:8]      iso_dat <- data.frame(attributes(longdata)$antigens) |>       dplyr::mutate(Subnum = as.numeric(row.names(.)))     jags_unpack <- jags_unpack |>       dplyr::mutate(         Subnum = sub(\".*,\", \"\", .data$Parameter),         Parameter_sub = sub(\"\\\\[.*\", \"\", .data$Parameter),         Subject = sub(\"\\\\,.*\", \"\", .data$Parameter)       ) |>       dplyr::mutate(         Subnum = as.numeric(sub(\"\\\\].*\", \"\", .data$Subnum)),         Subject = sub(\".*\\\\[\", \"\", .data$Subject)       ) |>       dplyr::left_join(iso_dat, by = \"Subnum\")      ids <- data.frame(attr(longdata, \"ids\")) |>       dplyr::mutate(Subject = as.character(dplyr::row_number()))      jags_final <- jags_unpack |>       dplyr::left_join(ids, by = \"Subject\") |>       dplyr::select(!c(\"Subnum\", \"Subject\")) |>       dplyr::rename(         Iso_type = \"attributes.longdata..antigens\",         Subject  = \"attr.longdata...ids..\"       )      jags_final$Stratification <- i     jags_out <- data.frame(rbind(jags_out, jags_final))   }    jags_out <- jags_out[complete.cases(jags_out), ]   jags_out <- dplyr::as_tibble(jags_out) |>     dplyr::select(!c(\"Parameter\")) |>     dplyr::rename(\"Parameter\" = \"Parameter_sub\") |>     dplyr::relocate(Iteration, Chain, Parameter, Iso_type, Stratification, Subject, value)    attributes(jags_out) <- c(attributes(jags_out), mod_atts)    # attach priors used (from last stratum)   jags_out <- jags_out |> structure(\"priors\" = attributes(priorspec)$used_priors)    fit_res <- calc_fit_mod(modeled_dat = jags_out, original_data = dl_sub)   jags_out <- jags_out |> structure(fitted_residuals = fit_res)    if (with_post) jags_out <- jags_out |> structure(jags.post = jags_post_final)    class(jags_out) <- union(\"sr_model\", class(jags_out))   jags_out }"},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/articles/Chapter2.html","id":"what-are-omegap-nup-omegab-nub-and-why-these-defaults","dir":"Articles","previous_headings":"","what":"What are OmegaP, nuP, OmegaB, nuB — and why these defaults?","title":"Chapter 2 — Fake Data First, Then Fit","text":"Wishart hyperparameters precision matrices (inverse covariances) used Kronecker prior: TP∼Wishart(ΩP,νP)\\text{T}_P \\sim \\text{Wishart}(\\Omega_P, \\nu_P) – within-biomarker parameter precision (5×5). TB∼Wishart(ΩB,νB)\\text{T}_B \\sim \\text{Wishart}(\\Omega_B, \\nu_B) – across-biomarker precision (B×B). Generally speaking (JAGS Wishart): 𝔼[T]≈ν⋅Ω−1\\mathop{\\mathbb{E}}[\\text{T}]\\approx \\nu \\cdot \\Omega^{-1} ν\\nu tiny. smaller diagonal entries Ω\\Omega imply larger expected precision (.e., smaller covariance), vice versa. nuP = 6 just dimension (5): proper tight. OmegaP = 0.1 * I_5 diffuse. small nuP, prior wide; data dominate. nuB = B + 1 minimally-informative choice B×B Wishart. OmegaB = I_B centers TauB near identity letting data learn cross-biomarker correlation. starting values. Validate prior predictive checks (simulate parameters → curves → sanity check ranges).","code":"OmegaP_scale = rep(0.1, 5);  nuP = 6 OmegaB_scale = rep(1.0, B);  nuB = B + 1"},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/articles/Chapter2.html","id":"chosen-weakly-informative-defaults","dir":"Articles","previous_headings":"","what":"Chosen weakly-informative defaults","title":"Chapter 2 — Fake Data First, Then Fit","text":"nuP = 6 just dimension (5): proper tight. OmegaP = 0.1 * I_5 diffuse. small nuP, prior wide; data dominate. nuB = B + 1 minimally-informative choice B×B Wishart. OmegaB = I_B centers TauB near identity letting data learn cross-biomarker correlation. starting values. Validate prior predictive checks (simulate parameters → curves → sanity check ranges).","code":"OmegaP_scale = rep(0.1, 5);  nuP = 6 OmegaB_scale = rep(1.0, B);  nuB = B + 1"},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/articles/Chapter2.html","id":"putting-it-together","dir":"Articles","previous_headings":"","what":"Putting it together","title":"Chapter 2 — Fake Data First, Then Fit","text":"Independence model (baseline): changes. Correlated model: supply usual priors new Kronecker priors:","code":"# Step 1: simulate fake data (or load real Shigella data) sim_tbl   # Step 2: write the new Kronecker model file (once per session/project) write_model_ch2_kron()  # Step 3: run the new wrapper with combined priors fit_kron <- run_mod_kron(   data     = sim_tbl,   file_mod = \"model_ch2_kron.jags\",   nchain   = 4, nadapt = 1000, nburn = 500,   nmc      = 500, niter = 5000,   strat    = NA,   mu_hyp_param = c(1.0, 7.0, 1.0, -4.0, -1.0)  # optional override )  # Step 4: inspect results (same as with run_mod) fit_kron"},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Peter Teunis. Author, copyright holder.           Author method original code. Samuel Schildhauer. Author, maintainer. Kwan Ho Lee. Contributor. Kristen Aiemjoy. Author. Douglas Ezra Morrison. Author.","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Teunis P, Schildhauer S, Aiemjoy K, Morrison D (2025). serodynamics: Package (One Line, Title Case). R package version 0.0.0.9042, https://github.com/UCD-SERG/serodynamics.","code":"@Manual{,   title = {serodynamics: What the Package Does (One Line, Title Case)},   author = {Peter Teunis and Samuel Schildhauer and Kristen Aiemjoy and Douglas Ezra Morrison},   year = {2025},   note = {R package version 0.0.0.9042},   url = {https://github.com/UCD-SERG/serodynamics}, }"},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/index.html","id":"serodynamics","dir":"","previous_headings":"","what":"What the Package Does (One Line, Title Case)","title":"What the Package Does (One Line, Title Case)","text":"goal serodynamics implement methods modeling longitudinal antibody responses infection.","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"What the Package Does (One Line, Title Case)","text":"can install development version serodynamics GitHub :","code":"# install.packages(\"pak\") pak::pak(\"UCD-SERG/serodynamics\")"},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/as_case_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert data into case_data — as_case_data","title":"Convert data into case_data — as_case_data","text":"Convert data case_data","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/as_case_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert data into case_data — as_case_data","text":"","code":"as_case_data(   data,   id_var = \"index_id\",   biomarker_var = \"antigen_iso\",   value_var = \"value\",   time_in_days = \"timeindays\" )"},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/as_case_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert data into case_data — as_case_data","text":"data data.frame id_var character string naming column data denoting participant ID biomarker_var character string naming column data denoting biomarker reported value_var (e.g. \"antigen_iso\") value_var character string naming column data biomarker measurements time_in_days character string naming column data elapsed time since seroconversion","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/as_case_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert data into case_data — as_case_data","text":"case_data object","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/as_case_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert data into case_data — as_case_data","text":"","code":"set.seed(1) serocalculator::typhoid_curves_nostrat_100 |>   sim_case_data(n = 5) |>   as_case_data(     id_var = \"id\",     biomarker_var = \"antigen_iso\",     time_in_days = \"timeindays\",     value_var = \"value\"   ) #> # A tibble: 105 × 11 #>    id    visit_num timeindays  iter antigen_iso    y0     y1     t1     alpha #>  * <chr>     <int>      <dbl> <int> <fct>       <dbl>  <dbl>  <dbl>     <dbl> #>  1 1             1          0    95 HlyE_IgA     1.98   21.9 10.5   0.000600  #>  2 1             1          0    95 HlyE_IgG     4.45   48.8 10.3   0.00135   #>  3 1             1          0    95 LPS_IgA      1.39   54.8  2.56  0.000591  #>  4 1             1          0    95 LPS_IgG     15.6   301.   0.472 0.0000352 #>  5 1             1          0    95 Vi_IgG       3.72 1075.   7.95  0.0000447 #>  6 1             2          8    95 HlyE_IgA     1.98   21.9 10.5   0.000600  #>  7 1             2          8    95 HlyE_IgG     4.45   48.8 10.3   0.00135   #>  8 1             2          8    95 LPS_IgA      1.39   54.8  2.56  0.000591  #>  9 1             2          8    95 LPS_IgG     15.6   301.   0.472 0.0000352 #> 10 1             2          8    95 Vi_IgG       3.72 1075.   7.95  0.0000447 #> # ℹ 95 more rows #> # ℹ 2 more variables: r <dbl>, value <dbl>"},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/autoplot.case_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot case data — autoplot.case_data","title":"Plot case data — autoplot.case_data","text":"Plot case data","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/autoplot.case_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot case data — autoplot.case_data","text":"","code":"# S3 method for class 'case_data' autoplot(object, log_y = TRUE, log_x = FALSE, ...)"},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/autoplot.case_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot case data — autoplot.case_data","text":"object case_data object log_y whether log-transform y-axis log_x whether log-transform x-axis ... Arguments passed ggplot2::geom_point, ggplot2::geom_line mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). orientation orientation layer. default (NA) automatically determines orientation aesthetic mapping. rare event fails can given explicitly setting orientation either \"x\" \"y\". See Orientation section detail.","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/autoplot.case_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot case data — autoplot.case_data","text":"ggplot2::ggplot","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/autoplot.case_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot case data — autoplot.case_data","text":"","code":"set.seed(1) sim_case_data <-   serocalculator::typhoid_curves_nostrat_100 |>   sim_case_data(n = 5, max_n_obs = 20, followup_interval = 14)  sim_case_data |>   autoplot(alpha = .5)"},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/calc_fit_mod.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates fitted and residual values for modeled outputs — calc_fit_mod","title":"Calculates fitted and residual values for modeled outputs — calc_fit_mod","text":"calc_fit_mod() takes antibody kinetic parameter estimates calculates fitted residual values. Fitted values correspond estimated assay value (ex. ELISA units etc.) time since infection (TSI). Residual values calculated difference fitted observed values.","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/calc_fit_mod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates fitted and residual values for modeled outputs — calc_fit_mod","text":"","code":"calc_fit_mod(modeled_dat, original_data)"},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/calc_fit_mod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates fitted and residual values for modeled outputs — calc_fit_mod","text":"modeled_dat data.frame modeled antibody kinetic parameter values. original_data data.frame original input dataset.","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/calc_fit_mod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates fitted and residual values for modeled outputs — calc_fit_mod","text":"data.frame attached attributes following values: Subject = ID number specifying individual Iso_type = modeled antigen_isotype t = Time since infection fitted = fitted value calculated using model output parameters given t residual = residual value calculated difference observed fitted values given t","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/initsfunction.html","id":null,"dir":"Reference","previous_headings":"","what":"JAGS chain initialization function — initsfunction","title":"JAGS chain initialization function — initsfunction","text":"JAGS chain initialization function","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/initsfunction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"JAGS chain initialization function — initsfunction","text":"","code":"initsfunction(chain)"},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/initsfunction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"JAGS chain initialization function — initsfunction","text":"chain integer specifying chain initialize","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/initsfunction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"JAGS chain initialization function — initsfunction","text":"list RNG seeds names","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/initsfunction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"JAGS chain initialization function — initsfunction","text":"","code":"initsfunction(1) #> $.RNG.seed #> [1] 1 #>  #> $.RNG.name #> [1] \"base::Wichmann-Hill\" #>"},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/load_data.html","id":null,"dir":"Reference","previous_headings":"","what":"load and format data — load_data","title":"load and format data — load_data","text":"add","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/load_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"load and format data — load_data","text":"","code":"load_data(   datapath = \"inst/extdata/\",   datafile = \"TypoidCaseData_github_09.30.21.csv\" )"},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/load_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"load and format data — load_data","text":"datapath path data folder datafile data file name","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/load_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"load and format data — load_data","text":"list following elements: smpl.t = time since symptom/fever onset participant, max 7 visits logy = log antibody response time-point (max 7) 7 biomarkers participant ntest max number biomarkers nsmpl = max number samples per participant nsubj = number study participants ndim = number parameters model(y0, y1, t1, alpha, shape) .hyp, prec.hyp, omega wishdf parameters describe shape priors (y0, y1, t1, alpha, shape)","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/nepal_sees.html","id":null,"dir":"Reference","previous_headings":"","what":"SEES Typhoid data — nepal_sees","title":"SEES Typhoid data — nepal_sees","text":"subset data SEES project highlighting Typhoid longitudinal data Nepal.","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/nepal_sees.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SEES Typhoid data — nepal_sees","text":"","code":"nepal_sees"},{"path":[]},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/nepal_sees.html","id":"nepal-sees","dir":"Reference","previous_headings":"","what":"nepal_sees","title":"SEES Typhoid data — nepal_sees","text":"base::data.frame() 904 rows 8 columns: Country Country name person_id ID identifying study participant sample_id ID identifying sample taken bldculres Pathogen participant tested positive ; Typhoid paratyphoid antigen_iso antigen/antibody combination included assay studyvisit Categorical estimated time frame sample taken; 28 days, 3_months, 6_months, 12_months, baseline, 18_months dayssincefeveronset Continuous measurement showing exact days since symptom onset result Continuous variable describing ELISA result","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/nepal_sees.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"SEES Typhoid data — nepal_sees","text":"reference study: https://doi.org/10.1016/S2666-5247(22)00114-8","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/nepal_sees_jags_output.html","id":null,"dir":"Reference","previous_headings":"","what":"SEES Typhoid run_mod jags output — nepal_sees_jags_output","title":"SEES Typhoid run_mod jags output — nepal_sees_jags_output","text":"run_mod() output using nepal_sees example data set input stratifying column \"bldculres\", diagnosis type (typhoid paratyphoid). Keeping IDs \"newperson\", \"sees_npl_1\", \"sees_npl_2\".","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/nepal_sees_jags_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SEES Typhoid run_mod jags output — nepal_sees_jags_output","text":"","code":"nepal_sees_jags_output"},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/nepal_sees_jags_output.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"SEES Typhoid run_mod jags output — nepal_sees_jags_output","text":"S3 object class sr_model: dplyr::tbl_df contains posterior predictive distribution person-specific parameters \"new person\" observed data (Subject = \"newperson\") posterior distributions person-specific parameters two arbitrarily-chosen subjects (\"sees_npl_1\" \"sees_npl_2\"). Contains 40,000 rows, 7 columns, model attributes. Iteration Number sampling iterations: 500 iterations Chain Number MCMC chains run: 2 chains run Parameter Parameter estimated Iso_type Antibody/antigen type combination evaluated: HlyE_IgA HlyE_IgG Stratification variable used stratify jags model: typhi paratyphi Subject ID subject evaluated: newperson, sees_npl_1, sees_npl_2 value Estimated value parameter attributes list attributes summarize jags inputs, priors, optional jags_post mcmc object","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/nepal_sees_jags_output.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"SEES Typhoid run_mod jags output — nepal_sees_jags_output","text":"reference study: https://doi.org/10.1016/S2666-5247(22)00114-8","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/plot_jags_Rhat.html","id":null,"dir":"Reference","previous_headings":"","what":"Rhat Plot Diagnostics — plot_jags_Rhat","title":"Rhat Plot Diagnostics — plot_jags_Rhat","text":"plot_jags_Rhat() takes list output run_mod() produce dotplots potential scale reduction factors (Rhat) chain run mcmc estimation. Rhat values analyze spread chains compared pooled values goal observing rhat < 1.10 convergence. Defaults produce every combination antigen/antibody, parameters, stratifications, unless otherwise specified. Antigen/antibody combinations stratifications vary analysis. antibody dynamic curve includes following parameters: y0 = baseline antibody concentration y1 = peak antibody concentration t1 = time peak r = shape parameter alpha = decay rate","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/plot_jags_Rhat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rhat Plot Diagnostics — plot_jags_Rhat","text":"","code":"plot_jags_Rhat(   data,   iso = unique(data$Iso_type),   param = unique(data$Parameter),   strat = unique(data$Stratification) )"},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/plot_jags_Rhat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rhat Plot Diagnostics — plot_jags_Rhat","text":"data list outputted run_mod(). iso Specify character string produce plots specific antigen/antibody combination, entered quotes. Default outputs antigen/antibody combinations. param Specify character string produce plots specific parameter, entered quotes. Options include: y0 = posterior estimate baseline antibody concentration y1 = posterior estimate peak antibody concentration t1 = posterior estimate time peak r = posterior estimate shape parameter alpha = posterior estimate decay rate strat Specify character string produce plots specific stratification entered quotes.","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/plot_jags_Rhat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rhat Plot Diagnostics — plot_jags_Rhat","text":"list ggplot2::ggplot objects producing dotplots rhat values specified input.","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/plot_jags_Rhat.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Rhat Plot Diagnostics — plot_jags_Rhat","text":"Sam Schildhauer","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/plot_jags_Rhat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rhat Plot Diagnostics — plot_jags_Rhat","text":"","code":"data <- serodynamics::nepal_sees_jags_output  plot_jags_Rhat(data = data,                iso = \"HlyE_IgA\",                strat = \"typhi\")"},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/plot_jags_dens.html","id":null,"dir":"Reference","previous_headings":"","what":"Density Plot Diagnostics — plot_jags_dens","title":"Density Plot Diagnostics — plot_jags_dens","text":"plot_jags_dens() takes list output run_mod() create density plots chain run mcmc estimation. Defaults produce every combination antigen/antibody, parameters, stratifications, unless otherwise specified. Antigen/antibody combinations stratifications vary analysis. antibody dynamic curve includes following parameters: y0 = baseline antibody concentration y1 = peak antibody concentration t1 = time peak r = shape parameter alpha = decay rate","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/plot_jags_dens.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Density Plot Diagnostics — plot_jags_dens","text":"","code":"plot_jags_dens(   data,   iso = unique(data$Iso_type),   param = unique(data$Parameter),   strat = unique(data$Stratification) )"},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/plot_jags_dens.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Density Plot Diagnostics — plot_jags_dens","text":"data list outputted run_mod(). iso Specify character string produce plots specific antigen/antibody combination, entered quotes. Default outputs antigen/antibody combinations. param Specify character string produce plots specific parameter, entered quotes. Options include: alpha = posterior estimate decay rate r = posterior estimate shape parameter t1 = posterior estimate time peak y0 = posterior estimate baseline antibody concentration y1 = posterior estimate peak antibody concentration strat Specify character string produce plots specific stratification entered quotes.","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/plot_jags_dens.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Density Plot Diagnostics — plot_jags_dens","text":"base::list() ggplot2::ggplot() objects producing density plots specified input.","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/plot_jags_dens.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Density Plot Diagnostics — plot_jags_dens","text":"Sam Schildhauer","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/plot_jags_dens.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Density Plot Diagnostics — plot_jags_dens","text":"","code":"data <- serodynamics::nepal_sees_jags_output  # Specifying isotype and stratification for traceplot. plot_jags_dens(                data = data,                iso = \"HlyE_IgA\",                strat = \"typhi\") #> $typhi #> $typhi$HlyE_IgA  #>  #>"},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/plot_jags_effect.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Effective Sample Size Diagnostics — plot_jags_effect","title":"Plot Effective Sample Size Diagnostics — plot_jags_effect","text":"plot_jags_effect() takes list output run_mod() create summary diagnostics chain run mcmc estimation. Defaults produce every combination antigen/antibody, parameters, stratifications, unless otherwise specified. least 2 chains required run function. Antigen/antibody combinations stratifications vary analysis. antibody dynamic curve includes following parameters: y0 = baseline antibody concentration y1 = peak antibody concentration t1 = time peak r = shape parameter alpha = decay rate","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/plot_jags_effect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Effective Sample Size Diagnostics — plot_jags_effect","text":"","code":"plot_jags_effect(   data,   iso = unique(data$Iso_type),   param = unique(data$Parameter),   strat = unique(data$Stratification) )"},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/plot_jags_effect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Effective Sample Size Diagnostics — plot_jags_effect","text":"data list outputted run_mod(). iso Specify character string produce plots specific antigen/antibody combination, entered quotes. Default outputs antigen/antibody combinations. param Specify character string produce plots specific parameter, entered quotes. Options include: y0 = posterior estimate baseline antibody concentration y1 = posterior estimate peak antibody concentration t1 = posterior estimate time peak r = posterior estimate shape parameter alpha = posterior estimate decay rate strat Specify character string produce plots specific stratification entered quotes.","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/plot_jags_effect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Effective Sample Size Diagnostics — plot_jags_effect","text":"list ggplot2::ggplot objects showing proportion effective samples taken/total samples taken parameter iso combinations. estimate highest proportion effective samples taken listed first.","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/plot_jags_effect.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot Effective Sample Size Diagnostics — plot_jags_effect","text":"Sam Schildhauer","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/plot_jags_effect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Effective Sample Size Diagnostics — plot_jags_effect","text":"","code":"data <- serodynamics::nepal_sees_jags_output  plot_jags_effect(data = data,                  iso = \"HlyE_IgA\",                  strat = \"typhi\")"},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/plot_jags_trace.html","id":null,"dir":"Reference","previous_headings":"","what":"Trace Plot Diagnostics — plot_jags_trace","title":"Trace Plot Diagnostics — plot_jags_trace","text":"plot_jags_trace() takes list output run_mod() create trace plots chain run mcmc estimation. Defaults produce every combination antigen/antibody, parameters, stratifications, unless otherwise specified. Antigen/antibody combinations stratifications vary analysis. antibody dynamic curve includes following parameters: y0 = baseline antibody concentration y1 = peak antibody concentration t1 = time peak r = shape parameter alpha = decay rate","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/plot_jags_trace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trace Plot Diagnostics — plot_jags_trace","text":"","code":"plot_jags_trace(   data,   iso = unique(data$Iso_type),   param = unique(data$Parameter),   strat = unique(data$Stratification) )"},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/plot_jags_trace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trace Plot Diagnostics — plot_jags_trace","text":"data list outputted run_mod(). iso Specify character string produce plots specific antigen/antibody combination, entered quotes. Default outputs antigen/antibody combinations. param Specify character string produce plots specific parameter, entered quotes. Options include: alpha = posterior estimate decay rate r = posterior estimate shape parameter t1 = posterior estimate time peak y0 = posterior estimate baseline antibody concentration y1 = posterior estimate peak antibody concentration strat Specify character string produce plots specific stratification entered quotes.","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/plot_jags_trace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trace Plot Diagnostics — plot_jags_trace","text":"list ggplot2::ggplot objects producing trace plots specified input.","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/plot_jags_trace.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Trace Plot Diagnostics — plot_jags_trace","text":"Sam Schildhauer","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/plot_jags_trace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trace Plot Diagnostics — plot_jags_trace","text":"","code":"data <- serodynamics::nepal_sees_jags_output  # Specifying isotype, parameter, and stratification for traceplot. plot_jags_trace(                 data = data,                 iso = \"HlyE_IgA\",                 strat = \"typhi\")"},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/plot_predicted_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Predicted Antibody Response Curves (Median + 95% CI) — plot_predicted_curve","title":"Generate Predicted Antibody Response Curves (Median + 95% CI) — plot_predicted_curve","text":"Plots median antibody response curve 95% credible interval ribbon, using MCMC samples posterior distribution. Optionally overlays observed data, applies logarithmic spacing y- x-axes, shows individual sampled curves.","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/plot_predicted_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Predicted Antibody Response Curves (Median + 95% CI) — plot_predicted_curve","text":"","code":"plot_predicted_curve(   model,   ids,   antigen_iso,   dataset = NULL,   legend_obs = \"Observed data\",   legend_median = \"Median prediction\",   show_quantiles = TRUE,   log_y = FALSE,   log_x = FALSE,   show_all_curves = FALSE,   alpha_samples = 0.3,   xlim = NULL,   ylab = NULL,   facet_by_id = length(ids) > 1,   ncol = NULL )"},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/plot_predicted_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Predicted Antibody Response Curves (Median + 95% CI) — plot_predicted_curve","text":"model sr_model object (returned run_mod()) containing samples posterior distribution model parameters. ids participant IDs plot; example, \"sees_npl_128\". antigen_iso antigen isotype plot; example, \"HlyE_IgA\" \"HlyE_IgG\". dataset (Optional) dplyr::tbl_df observed antibody response data. Must contain: timeindays value id antigen_iso legend_obs Label observed data legend. legend_median Label median prediction line. show_quantiles logical; TRUE (default), plots 2.5%, 50%, 97.5% quantiles. log_y logical; TRUE, applies log10 transformation y-axis. log_x logical; TRUE, applies log10 transformation x-axis. show_all_curves logical; TRUE, overlays individual sampled curves. alpha_samples Numeric; transparency level individual curves (default = 0.3). xlim (Optional) numeric vector length 2 providing custom x-axis limits. ylab (Optional) string y-axis label. NULL (default), label automatically set \"ELISA units\" \"ELISA units (log scale)\" based log_y argument. facet_by_id logical; TRUE, facets plot 'id'. Defaults TRUE multiple IDs provided. ncol integer; number columns faceting.","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/plot_predicted_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Predicted Antibody Response Curves (Median + 95% CI) — plot_predicted_curve","text":"ggplot2::ggplot object displaying predicted antibody response curves median curve 95% credible interval band default.","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/plot_predicted_curve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Predicted Antibody Response Curves (Median + 95% CI) — plot_predicted_curve","text":"","code":"sees_model <- serodynamics::nepal_sees_jags_output sees_data <- serodynamics::nepal_sees  # Plot (linear axes) with all individual curves + median ribbon p1 <- plot_predicted_curve(   model              = sees_model,   dataset            = sees_data,   id                 = \"sees_npl_128\",   antigen_iso        = \"HlyE_IgA\",   show_quantiles     = TRUE,   log_y              = FALSE,   log_x              = FALSE,   show_all_curves    = TRUE ) print(p1)   # Plot (log10 y-axis) with all individual curves + median ribbon p2 <- plot_predicted_curve(   model              = sees_model,   dataset            = sees_data,   id                 = \"sees_npl_128\",   antigen_iso        = \"HlyE_IgA\",   show_quantiles     = TRUE,   log_y              = TRUE,   log_x              = FALSE,   show_all_curves    = TRUE ) print(p2)   # Plot with custom x-axis limits (0-600 days) p3 <- plot_predicted_curve(   model              = sees_model,   dataset            = sees_data,   id                 = \"sees_npl_128\",   antigen_iso        = \"HlyE_IgA\",   show_quantiles     = TRUE,   log_y              = FALSE,   log_x              = FALSE,   show_all_curves    = TRUE,   xlim               = c(0, 600) ) print(p3)   # Multi-ID, faceted plot (single antigen): p4 <- plot_predicted_curve(   model           = sees_model,   dataset         = sees_data,   id              = c(\"sees_npl_128\", \"sees_npl_131\"),   antigen_iso     = \"HlyE_IgA\",   show_all_curves = TRUE,   facet_by_id     = TRUE ) print(p4)"},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/plot_title_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting title for diagnostic functions — plot_title_fun","title":"Plotting title for diagnostic functions — plot_title_fun","text":"Plotting title diagnostic functions","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/plot_title_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting title for diagnostic functions — plot_title_fun","text":"","code":"plot_title_fun(i, j)"},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/plot_title_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting title for diagnostic functions — plot_title_fun","text":"input strata j input antigen/iso combination","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/post_summ.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary Table of Jags Posterior Estimates — post_summ","title":"Summary Table of Jags Posterior Estimates — post_summ","text":"post_summ() takes list output run_mod() summary table parameter, antigen/antibody, stratification combination. Defaults produce every combination antigen/antibody, parameters, stratifications, unless otherwise specified. Antigen/antibody combinations stratifications vary analysis. antibody dynamic curve includes following parameters: y0 = baseline antibody concentration y1 = peak antibody concentration t1 = time peak r = shape parameter alpha = decay rate","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/post_summ.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary Table of Jags Posterior Estimates — post_summ","text":"","code":"post_summ(   data,   iso = unique(data$Iso_type),   param = unique(data$Parameter),   strat = unique(data$Stratification) )"},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/post_summ.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary Table of Jags Posterior Estimates — post_summ","text":"data list outputted run_mod(). iso Specify character string produce tables specific antigen/antibody combination, entered quotes. Default outputs antigen/antibody combinations. param Specify character string produce tables specific parameter, entered quotes. Options include: alpha = posterior estimate decay rate r = posterior estimate shape parameter t1 = posterior estimate time peak y0 = posterior estimate baseline antibody concentration y1 = posterior estimate peak antibody concentration strat Specify character string produce tables specific stratification entered quotes.","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/post_summ.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary Table of Jags Posterior Estimates — post_summ","text":"data.frame summarizing estimate mean, standard deviation (SD), median, quantiles (2.5%, 25.0%, 50.0%, 75.0%, 97.5%).","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/post_summ.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summary Table of Jags Posterior Estimates — post_summ","text":"Sam Schildhauer","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/post_summ.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary Table of Jags Posterior Estimates — post_summ","text":"","code":"post_summ(data = serodynamics::nepal_sees_jags_output) #> # A tibble: 20 × 11 #>    Iso_type Parameter Stratification       Mean       SD  Median  `2.5%` `25.0%` #>    <chr>    <chr>     <chr>               <dbl>    <dbl>   <dbl>   <dbl>   <dbl> #>  1 HlyE_IgA alpha     paratyphi         0.00266  3.92e-3 1.56e-3 1.99e-4 7.47e-4 #>  2 HlyE_IgA alpha     typhi             0.00293  4.18e-3 1.51e-3 1.48e-4 6.88e-4 #>  3 HlyE_IgA shape     paratyphi         1.63     2.82e-1 1.56e+0 1.27e+0 1.44e+0 #>  4 HlyE_IgA shape     typhi             1.77     4.41e-1 1.67e+0 1.26e+0 1.49e+0 #>  5 HlyE_IgA t1        paratyphi         4.28     2.11e+0 3.90e+0 1.56e+0 2.73e+0 #>  6 HlyE_IgA t1        typhi             7.91     5.98e+0 6.36e+0 1.95e+0 4.39e+0 #>  7 HlyE_IgA y0        paratyphi         3.83     2.65e+0 2.85e+0 1.07e+0 1.88e+0 #>  8 HlyE_IgA y0        typhi             2.90     2.23e+0 2.34e+0 7.70e-1 1.69e+0 #>  9 HlyE_IgA y1        paratyphi      2781.       4.19e+4 1.92e+2 7.45e+0 5.61e+1 #> 10 HlyE_IgA y1        typhi          1275.       6.42e+3 2.58e+2 9.11e+0 8.44e+1 #> 11 HlyE_IgG alpha     paratyphi         0.00202  2.11e-3 1.43e-3 2.25e-4 7.07e-4 #> 12 HlyE_IgG alpha     typhi             0.00196  1.88e-3 1.39e-3 2.69e-4 7.57e-4 #> 13 HlyE_IgG shape     paratyphi         1.41     1.56e-1 1.39e+0 1.17e+0 1.29e+0 #> 14 HlyE_IgG shape     typhi             1.49     3.78e-1 1.39e+0 1.08e+0 1.23e+0 #> 15 HlyE_IgG t1        paratyphi         5.02     1.87e+0 4.73e+0 2.18e+0 3.75e+0 #> 16 HlyE_IgG t1        typhi             7.67     6.84e+0 6.02e+0 1.59e+0 3.82e+0 #> 17 HlyE_IgG y0        paratyphi         2.46     9.14e-1 2.33e+0 1.23e+0 1.87e+0 #> 18 HlyE_IgG y0        typhi             2.11     1.40e+0 1.79e+0 4.79e-1 1.22e+0 #> 19 HlyE_IgG y1        paratyphi       929.       4.52e+3 2.73e+2 2.09e+1 1.08e+2 #> 20 HlyE_IgG y1        typhi           512.       9.65e+2 2.44e+2 2.77e+1 1.11e+2 #> # ℹ 3 more variables: `50.0%` <dbl>, `75.0%` <dbl>, `97.5%` <dbl>"},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/postprocess_jags_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Postprocess JAGS output — postprocess_jags_output","title":"Postprocess JAGS output — postprocess_jags_output","text":"Postprocess JAGS output","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/postprocess_jags_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Postprocess JAGS output — postprocess_jags_output","text":"","code":"postprocess_jags_output(jags_output, ids, antigen_isos)"},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/postprocess_jags_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Postprocess JAGS output — postprocess_jags_output","text":"jags_output output runjags::run.jags() ids IDs individuals sampled (JAGS discards information, re-attached) antigen_isos names biomarkers modeled (JAGS discards information, re-attached)","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/postprocess_jags_output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Postprocess JAGS output — postprocess_jags_output","text":"tibble::tbl_df","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/postprocess_jags_output.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Postprocess JAGS output — postprocess_jags_output","text":"","code":"set.seed(1) raw_data <-   serocalculator::typhoid_curves_nostrat_100 |>   dplyr::filter(     antigen_iso |> stringr::str_starts(pattern = \"HlyE\")   ) |>   sim_case_data(     n = 5,     antigen_isos = c(\"HlyE_IgA\", \"HlyE_IgG\")   ) prepped_data <- prep_data(raw_data) priors <- prep_priors(max_antigens = prepped_data$n_antigen_isos) nchains <- 2 # nr of MC chains to run simultaneously nadapt <- 1000 # nr of iterations for adaptation nburnin <- 100 # nr of iterations to use for burn-in nmc <- 100 # nr of samples in posterior chains niter <- 200 # nr of iterations for posterior sample nthin <- round(niter / nmc) # thinning needed to produce nmc from niter  tomonitor <- c(\"y0\", \"y1\", \"t1\", \"alpha\", \"shape\")  file_mod <- serodynamics_example(\"model.jags\")  set.seed(11325) jags_post <- runjags::run.jags(   model = file_mod,   data = c(prepped_data, priors),   inits = initsfunction,   method = \"parallel\",   adapt = nadapt,   burnin = nburnin,   thin = nthin,   sample = nmc,   n.chains = nchains,   monitor = tomonitor,   summarise = FALSE ) #> Calling 2 simulations using the parallel method... #> Following the progress of chain 1 (the program will wait for all chains #> to finish before continuing): #> Welcome to JAGS 4.3.2 on Tue Sep 23 17:30:28 2025 #> JAGS is free software and comes with ABSOLUTELY NO WARRANTY #> Loading module: basemod: ok #> Loading module: bugs: ok #> . . Reading data file data.txt #> . Compiling model graph #>    Resolving undeclared variables #>    Allocating nodes #> Graph information: #>    Observed stochastic nodes: 42 #>    Unobserved stochastic nodes: 24 #>    Total graph size: 930 #> . Reading parameter file inits1.txt #> . Initializing model #> . Adapting 1000 #> -------------------------------------------------| 1000 #> ++++++++++++++++++++++++++++++++++++++++++++++++++ 100% #> Adaptation successful #> . Updating 100 #> -------------------------------------------------| 100 #> ************************************************** 100% #> . . . . . . Updating 200 #> -------------------------------------------------| 200 #> ************************************************** 100% #> . . . . Updating 0 #> . Deleting model #> .  #> All chains have finished #> Simulation complete.  Reading coda files... #> Coda files loaded successfully #> Finished running the simulation  curve_params <- jags_post |> postprocess_jags_output(   ids = attr(prepped_data, \"ids\"),   antigen_isos = attr(prepped_data, \"antigens\") )  print(curve_params) #> # A tibble: 400 × 8 #>    antigen_iso  iter chain    y0     y1    t1    alpha     r #>    <fct>       <int> <int> <dbl>  <dbl> <dbl>    <dbl> <dbl> #>  1 HlyE_IgA        1     1 1.39   77.1  10.7  0.00202   1.50 #>  2 HlyE_IgA        2     1 0.772  23.3  10.4  0.000669  1.38 #>  3 HlyE_IgA        3     1 1.01   19.2   3.23 0.000132  1.52 #>  4 HlyE_IgA        4     1 1.13    1.39  7.88 0.000579  1.49 #>  5 HlyE_IgA        5     1 1.54   83.6   6.11 0.000722  1.51 #>  6 HlyE_IgA        6     1 1.19  420.    8.36 0.00330   1.32 #>  7 HlyE_IgA        7     1 1.03    5.44  7.98 0.000382  1.41 #>  8 HlyE_IgA        8     1 1.40    3.24 11.0  0.00104   1.69 #>  9 HlyE_IgA        9     1 1.01   12.4   7.19 0.000357  1.54 #> 10 HlyE_IgA       10     1 1.12    2.18  6.46 0.000973  1.51 #> # ℹ 390 more rows"},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/prep_data.html","id":null,"dir":"Reference","previous_headings":"","what":"prepare data for JAGs — prep_data","title":"prepare data for JAGs — prep_data","text":"prepare data JAGs","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/prep_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"prepare data for JAGs — prep_data","text":"","code":"prep_data(   dataframe,   biomarker_column = get_biomarker_names_var(dataframe),   verbose = FALSE )"},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/prep_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"prepare data for JAGs — prep_data","text":"dataframe data.frame containing ... biomarker_column character string indicating column contains antigen-isotype names verbose whether produce verbose messaging","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/prep_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"prepare data for JAGs — prep_data","text":"prepped_jags_data object (list extra attributes ...)","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/prep_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"prepare data for JAGs — prep_data","text":"","code":"set.seed(1) raw_data <-   serocalculator::typhoid_curves_nostrat_100 |>   sim_case_data(n = 5) prepped_data <- prep_data(raw_data)"},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/prep_priors.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare priors — prep_priors","title":"Prepare priors — prep_priors","text":"Takes multiple vector inputs allow modifiable priors. Priors can specified option run_mod.","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/prep_priors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare priors — prep_priors","text":"","code":"prep_priors(   max_antigens,   mu_hyp_param = c(1, 7, 1, -4, -1),   prec_hyp_param = c(1, 1e-05, 1, 0.001, 1),   omega_param = c(1, 50, 1, 10, 1),   wishdf_param = 20,   prec_logy_hyp_param = c(4, 1) )"},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/prep_priors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare priors — prep_priors","text":"max_antigens integer specifying many antigen-isotypes (biomarkers) modeled. mu_hyp_param numeric vector 5 values representing prior mean population level parameters parameters (y0, y1, t1, r, alpha) biomarker. specified, must 5 values long, representing following parameters: y0 = baseline antibody concentration (default = 1.0) y1 = peak antibody concentration (default = 7.0) t1 = time peak (default = 1.0) r = shape parameter (default = -4.0) alpha = decay rate (default = -1.0) prec_hyp_param numeric vector 5 values corresponding hyperprior diagonal entries precision matrix (.e. inverse variance) representing prior covariance uncertainty around mu_hyp_param. specified, must 5 values long: defaults: y0 = 1.0, y1 = 0.00001, t1 = 1.0, r = 0.001, alpha = 1.0 omega_param numeric vector 5 values corresponding diagonal entries representing Wishart hyperprior distributions prec_hyp_param, describing much expect parameters vary individuals. specified, must 5 values long: defaults: y0 = 1.0, y1 = 50.0, t1 = 1.0, r = 10.0, alpha = 1.0 wishdf_param integer vector 1 value specifying degrees freedom Wishart hyperprior distribution prec_hyp_param. specified, must 1 value long. default = 20.0 value wishdf_param controls informative Wishart prior . Higher values lead tighter priors individual variation. Lower values (e.g., 5–10) make prior weakly informative, can help improve convergence model -regularized. prec_logy_hyp_param numeric vector 2 values corresponding hyperprior diagonal entries log-scale precision matrix (.e. inverse variance) representing prior beliefs individual variation. specified, must 2 values long: defaults = 4.0, 1.0","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/prep_priors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare priors — prep_priors","text":"\"curve_params_priors\" object (subclass list inputs prep_priors() attached attributes entry named \"used_priors\"), containing following elements: \"n_params\": Corresponds 5 parameters estimated. \"mu.hyp\": matrix hyperpriors dimensions max_antigens x 5 (# parameters), representing mean hyperprior distribution five seroresponse parameters: y0, y1, t1, r, alpha). \"prec.hyp\": three-dimensional numeric array dimensions max_antigens x 5 (# parameters), containing precision matrices hyperprior distributions mu.hyp, biomarker. \"omega\" : three-dimensional numeric array 5 matrix,dimensions max_antigens x 5 (# parameters), representing precision matrix Wishart hyper-priors prec.hyp. \"wishdf\": vector 2 values specifying degrees freedom Wishart distribution used subject-level precision prior. \"prec.logy.hyp\": matrix hyper-parameters precision (inverse variance) individual variation measuring max_antigens x 2, log-scale. used_priors = inputs prep_priors() attached attributes.","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/prep_priors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare priors — prep_priors","text":"","code":"prep_priors(max_antigens = 2,             mu_hyp_param = c(1.0, 7.0, 1.0, -4.0, -1.0),             prec_hyp_param = c(1.0, 0.00001, 1.0, 0.001, 1.0),             omega_param = c(1.0, 50.0, 1.0, 10.0, 1.0),             wishdf_param = 20,             prec_logy_hyp_param = c(4.0, 1.0)) #> $n_params #> [1] 5 #>  #> $mu.hyp #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    7    1   -4   -1 #> [2,]    1    7    1   -4   -1 #>  #> $prec.hyp #> , , 1 #>  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    0    0    0    0 #> [2,]    1    0    0    0    0 #>  #> , , 2 #>  #>      [,1]  [,2] [,3] [,4] [,5] #> [1,]    0 1e-05    0    0    0 #> [2,]    0 1e-05    0    0    0 #>  #> , , 3 #>  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    1    0    0 #> [2,]    0    0    1    0    0 #>  #> , , 4 #>  #>      [,1] [,2] [,3]  [,4] [,5] #> [1,]    0    0    0 0.001    0 #> [2,]    0    0    0 0.001    0 #>  #> , , 5 #>  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    1 #> [2,]    0    0    0    0    1 #>  #>  #> $omega #> , , 1 #>  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    0    0    0    0 #> [2,]    1    0    0    0    0 #>  #> , , 2 #>  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0   50    0    0    0 #> [2,]    0   50    0    0    0 #>  #> , , 3 #>  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    1    0    0 #> [2,]    0    0    1    0    0 #>  #> , , 4 #>  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0   10    0 #> [2,]    0    0    0   10    0 #>  #> , , 5 #>  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    1 #> [2,]    0    0    0    0    1 #>  #>  #> $wishdf #> [1] 20 20 #>  #> $prec.logy.hyp #>      [,1] [,2] #> [1,]    4    1 #> [2,]    4    1 #>  #> attr(,\"class\") #> [1] \"curve_params_priors\" \"list\"                #> attr(,\"used_priors\") #> attr(,\"used_priors\")$mu_hyp_param #> [1]  1  7  1 -4 -1 #>  #> attr(,\"used_priors\")$prec_hyp_param #> [1] 1e+00 1e-05 1e+00 1e-03 1e+00 #>  #> attr(,\"used_priors\")$omega_param #> [1]  1 50  1 10  1 #>  #> attr(,\"used_priors\")$wishdf_param #> [1] 20 #>  #> attr(,\"used_priors\")$prec_logy_hyp_param #> [1] 4 1 #>   prep_priors(max_antigens = 2) #> $n_params #> [1] 5 #>  #> $mu.hyp #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    7    1   -4   -1 #> [2,]    1    7    1   -4   -1 #>  #> $prec.hyp #> , , 1 #>  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    0    0    0    0 #> [2,]    1    0    0    0    0 #>  #> , , 2 #>  #>      [,1]  [,2] [,3] [,4] [,5] #> [1,]    0 1e-05    0    0    0 #> [2,]    0 1e-05    0    0    0 #>  #> , , 3 #>  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    1    0    0 #> [2,]    0    0    1    0    0 #>  #> , , 4 #>  #>      [,1] [,2] [,3]  [,4] [,5] #> [1,]    0    0    0 0.001    0 #> [2,]    0    0    0 0.001    0 #>  #> , , 5 #>  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    1 #> [2,]    0    0    0    0    1 #>  #>  #> $omega #> , , 1 #>  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    0    0    0    0 #> [2,]    1    0    0    0    0 #>  #> , , 2 #>  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0   50    0    0    0 #> [2,]    0   50    0    0    0 #>  #> , , 3 #>  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    1    0    0 #> [2,]    0    0    1    0    0 #>  #> , , 4 #>  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0   10    0 #> [2,]    0    0    0   10    0 #>  #> , , 5 #>  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0    1 #> [2,]    0    0    0    0    1 #>  #>  #> $wishdf #> [1] 20 20 #>  #> $prec.logy.hyp #>      [,1] [,2] #> [1,]    4    1 #> [2,]    4    1 #>  #> attr(,\"class\") #> [1] \"curve_params_priors\" \"list\"                #> attr(,\"used_priors\") #> attr(,\"used_priors\")$mu_hyp_param #> [1]  1  7  1 -4 -1 #>  #> attr(,\"used_priors\")$prec_hyp_param #> [1] 1e+00 1e-05 1e+00 1e-03 1e+00 #>  #> attr(,\"used_priors\")$omega_param #> [1]  1 50  1 10  1 #>  #> attr(,\"used_priors\")$wishdf_param #> [1] 20 #>  #> attr(,\"used_priors\")$prec_logy_hyp_param #> [1] 4 1 #>"},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. ggplot2 autoplot serocalculator get_biomarker_levels, get_biomarker_names_var","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/run_mod.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Jags Model — run_mod","title":"Run Jags Model — run_mod","text":"run_mod() takes data frame adjustable MCMC inputs runjags::run.jags() MCMC Bayesian model estimate antibody dynamic curve parameters. rjags::jags.model() models seroresponse dynamics infection. antibody dynamic curve includes following parameters: y0 = baseline antibody concentration y1 = peak antibody concentration t1 = time peak shape = shape parameter alpha = decay rate","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/run_mod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Jags Model — run_mod","text":"","code":"run_mod(   data,   file_mod = serodynamics_example(\"model.jags\"),   nchain = 4,   nadapt = 0,   nburn = 0,   nmc = 100,   niter = 100,   strat = NA,   with_post = FALSE,   ... )"},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/run_mod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Jags Model — run_mod","text":"data base::data.frame() following columns. file_mod name file contains model structure. nchain integer 1 4 specifies number MCMC chains run per jags model. nadapt integer specifying number adaptations per chain. nburn integer specifying number burn ins sampling. nmc integer specifying number samples posterior chains. niter integer specifying number iterations. strat character string specifying stratification variable, entered quotes. with_post logical value specifying whether raw jags.post component included element list object returned run_mod() (see Value section details). Note: objects can large. ... Arguments passed prep_priors max_antigens integer specifying many antigen-isotypes (biomarkers) modeled. mu_hyp_param numeric vector 5 values representing prior mean population level parameters parameters (y0, y1, t1, r, alpha) biomarker. specified, must 5 values long, representing following parameters: y0 = baseline antibody concentration (default = 1.0) y1 = peak antibody concentration (default = 7.0) t1 = time peak (default = 1.0) r = shape parameter (default = -4.0) alpha = decay rate (default = -1.0) prec_hyp_param numeric vector 5 values corresponding hyperprior diagonal entries precision matrix (.e. inverse variance) representing prior covariance uncertainty around mu_hyp_param. specified, must 5 values long: defaults: y0 = 1.0, y1 = 0.00001, t1 = 1.0, r = 0.001, alpha = 1.0 omega_param numeric vector 5 values corresponding diagonal entries representing Wishart hyperprior distributions prec_hyp_param, describing much expect parameters vary individuals. specified, must 5 values long: defaults: y0 = 1.0, y1 = 50.0, t1 = 1.0, r = 10.0, alpha = 1.0 wishdf_param integer vector 1 value specifying degrees freedom Wishart hyperprior distribution prec_hyp_param. specified, must 1 value long. default = 20.0 value wishdf_param controls informative Wishart prior . Higher values lead tighter priors individual variation. Lower values (e.g., 5–10) make prior weakly informative, can help improve convergence model -regularized. prec_logy_hyp_param numeric vector 2 values corresponding hyperprior diagonal entries log-scale precision matrix (.e. inverse variance) representing prior beliefs individual variation. specified, must 2 values long: defaults = 4.0, 1.0","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/run_mod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Jags Model — run_mod","text":"sr_model class object: subclass dplyr::tbl_df contains MCMC samples joint posterior distribution model parameters, conditional provided input data, including following: iteration = Number sampling iterations chain = Number MCMC chains run; 1 4 Parameter = Parameter estimated. Includes following: y0 = Posterior estimate baseline antibody concentration y1 = Posterior estimate peak antibody concentration t1 = Posterior estimate time peak shape = Posterior estimate shape parameter alpha = Posterior estimate decay rate Iso_type = Antibody/antigen type combination evaluated Stratification = variable used stratify jags model Subject = ID subject evaluated value = Estimated value parameter following attributes included output: class: Class output object. nChain: Number chains run. nParameters: amount parameters estimated model. nIterations: Number iteration specified. nBurnin: Number burn ins. nThin: Thinning number (niter/nmc). priors: list summarizes input priors, including: mu_hyp_param prec_hyp_param omega_param wishdf prec_logy_hyp_param fitted_residuals: data.frame containing fitted residual values observations. optional \"jags.post\" attribute, included argument with_post = TRUE.","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/run_mod.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Run Jags Model — run_mod","text":"Sam Schildhauer","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/run_mod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Jags Model — run_mod","text":"","code":"if (!is.element(runjags::findjags(), c(\"\", NULL))) {   library(runjags)   set.seed(1)   library(dplyr)   strat1 <- serocalculator::typhoid_curves_nostrat_100 |>     sim_case_data(n = 100) |>     mutate(strat = \"stratum 2\")   strat2 <- serocalculator::typhoid_curves_nostrat_100 |>     sim_case_data(n = 100) |>     mutate(strat = \"stratum 1\")    dataset <- bind_rows(strat1, strat2)    fitted_model <- run_mod(     data = dataset, # The data set input     file_mod = serodynamics_example(\"model.jags\"),     nchain = 4, # Number of mcmc chains to run     nadapt = 100, # Number of adaptations to run     nburn = 100, # Number of unrecorded samples before sampling begins     nmc = 1000,     niter = 2000, # Number of iterations     strat = \"strat\"   ) # Variable to be stratified } #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union #> Calling 4 simulations using the parallel method... #> Following the progress of chain 1 (the program will wait for all chains #> to finish before continuing): #> Welcome to JAGS 4.3.2 on Tue Sep 23 17:30:35 2025 #> JAGS is free software and comes with ABSOLUTELY NO WARRANTY #> Loading module: basemod: ok #> Loading module: bugs: ok #> . . Reading data file data.txt #> . Compiling model graph #>    Resolving undeclared variables #>    Allocating nodes #> Graph information: #>    Observed stochastic nodes: 3020 #>    Unobserved stochastic nodes: 535 #>    Total graph size: 44517 #> . Reading parameter file inits1.txt #> . Initializing model #> . Adapting 100 #> -------------------------------------------------| 100 #> ++++++++++++++++++++++++++++++++++++++++++++++++++ 100% #> Adaptation incomplete. #> . Updating 100 #> -------------------------------------------------| 100 #> ************************************************** 100% #> . . . . . . Updating 2000 #> -------------------------------------------------| 2000 #> ************************************************** 100% #> . . . . Updating 0 #> . Deleting model #> All chains have finished #> Warning: The adaptation phase of one or more models was not completed in 100 iterations, so the current samples may not be optimal - try increasing the number of iterations to the \"adapt\" argument #> Simulation complete.  Reading coda files... #> Coda files loaded successfully #> Finished running the simulation #> Calling 4 simulations using the parallel method... #> Following the progress of chain 1 (the program will wait for all chains #> to finish before continuing): #> Welcome to JAGS 4.3.2 on Tue Sep 23 17:31:25 2025 #> JAGS is free software and comes with ABSOLUTELY NO WARRANTY #> Loading module: basemod: ok #> Loading module: bugs: ok #> . . Reading data file data.txt #> . Compiling model graph #>    Resolving undeclared variables #>    Allocating nodes #> Graph information: #>    Observed stochastic nodes: 2555 #>    Unobserved stochastic nodes: 535 #>    Total graph size: 39309 #> . Reading parameter file inits1.txt #> . Initializing model #> . Adapting 100 #> -------------------------------------------------| 100 #> ++++++++++++++++++++++++++++++++++++++++++++++++++ 100% #> Adaptation incomplete. #> . Updating 100 #> -------------------------------------------------| 100 #> ************************************************** 100% #> . . . . . . Updating 2000 #> -------------------------------------------------| 2000 #> ************************************************** 100% #> . . . . Updating 0 #> . Deleting model #> .  #> All chains have finished #> Warning: The adaptation phase of one or more models was not completed in 100 iterations, so the current samples may not be optimal - try increasing the number of iterations to the \"adapt\" argument #> Simulation complete.  Reading coda files... #> Coda files loaded successfully #> Finished running the simulation"},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/serodynamics-package.html","id":null,"dir":"Reference","previous_headings":"","what":"serodynamics: What the Package Does (One Line, Title Case) — serodynamics-package","title":"serodynamics: What the Package Does (One Line, Title Case) — serodynamics-package","text":"Modeling longitudinal immune seroresponses pathogens.","code":""},{"path":[]},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/serodynamics-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"serodynamics: What the Package Does (One Line, Title Case) — serodynamics-package","text":"Maintainer: Samuel Schildhauer sschildhauer@ucdavis.edu Authors: Peter Teunis p.teunis@emory.edu (Author method original code.) [copyright holder] Kristen Aiemjoy kaiemjoy@ucdavis.edu Douglas Ezra Morrison demorrison@ucdavis.edu contributors: Kwan Ho Lee ksjlee@ucdavis.edu [contributor]","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/serodynamics_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Get path to an example file — serodynamics_example","title":"Get path to an example file — serodynamics_example","text":"serodynamics package comes bundled number sample files inst/extdata directory. serodynamics_example() function make sample files easy access.","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/serodynamics_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get path to an example file — serodynamics_example","text":"","code":"serodynamics_example(file = NULL)"},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/serodynamics_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get path to an example file — serodynamics_example","text":"file Name file. NULL, example files listed.","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/serodynamics_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get path to an example file — serodynamics_example","text":"character string providing path file specified file, vector available files file = NULL.","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/serodynamics_example.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get path to an example file — serodynamics_example","text":"Adapted readr::readr_example() following guidance https://r-pkgs.org/data.html#sec-data-example-path-helper.","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/serodynamics_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get path to an example file — serodynamics_example","text":"","code":"serodynamics_example() #> [1] \"SEES_Case_Nepal_ForSeroKinetics_02-13-2025.csv\" #> [2] \"model.dobson.jags\"                              #> [3] \"model.jags\"                                     serodynamics_example(   \"SEES_Case_Nepal_ForSeroKinetics_02-13-2025.csv\") #> /home/runner/work/_temp/Library/serodynamics/extdata/SEES_Case_Nepal_ForSeroKinetics_02-13-2025.csv"},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/sim_case_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate longitudinal case follow-up data from a homogeneous population — sim_case_data","title":"Simulate longitudinal case follow-up data from a homogeneous population — sim_case_data","text":"Simulate longitudinal case follow-data homogeneous population","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/sim_case_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate longitudinal case follow-up data from a homogeneous population — sim_case_data","text":"","code":"sim_case_data(   n,   curve_params,   antigen_isos = get_biomarker_levels(curve_params),   max_n_obs = 10,   dist_n_obs = tibble::tibble(n_obs = 1:max_n_obs, prob = 1/max_n_obs),   followup_interval = 7,   followup_variance = 1 )"},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/sim_case_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate longitudinal case follow-up data from a homogeneous population — sim_case_data","text":"n integer number cases simulate curve_params curve_params object serocalculator::as_curve_params, assumed unstratified antigen_isos character vector: antigen isotypes simulate max_n_obs maximum number observations dist_n_obs distribution number observations (tibble::tbl_df) followup_interval integer followup_variance integer","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/sim_case_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate longitudinal case follow-up data from a homogeneous population — sim_case_data","text":"case_data object","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/sim_case_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate longitudinal case follow-up data from a homogeneous population — sim_case_data","text":"","code":"set.seed(1) serocalculator::typhoid_curves_nostrat_100 |>   sim_case_data(n = 100) #> # A tibble: 3,020 × 11 #>    id    visit_num timeindays  iter antigen_iso    y0     y1    t1   alpha     r #>  * <chr>     <int>      <dbl> <int> <fct>       <dbl>  <dbl> <dbl>   <dbl> <dbl> #>  1 1             1          0    83 HlyE_IgA    1.33   50.8   2.60 2.68e-3  1.54 #>  2 1             1          0    83 HlyE_IgG    3.49  265.    6.08 1.53e-3  1.24 #>  3 1             1          0    83 LPS_IgA     0.878   4.69  3.06 9.84e-4  2.42 #>  4 1             1          0    83 LPS_IgG     1.64  300.    2.35 7.28e-4  1.60 #>  5 1             1          0    83 Vi_IgG      1.30  264.    8.02 5.46e-5  1.26 #>  6 1             2          7    83 HlyE_IgA    1.33   50.8   2.60 2.68e-3  1.54 #>  7 1             2          7    83 HlyE_IgG    3.49  265.    6.08 1.53e-3  1.24 #>  8 1             2          7    83 LPS_IgA     0.878   4.69  3.06 9.84e-4  2.42 #>  9 1             2          7    83 LPS_IgG     1.64  300.    2.35 7.28e-4  1.60 #> 10 1             2          7    83 Vi_IgG      1.30  264.    8.02 5.46e-5  1.26 #> # ℹ 3,010 more rows #> # ℹ 1 more variable: value <dbl>"},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/sim_n_obs.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate number of longitudinal observations — sim_n_obs","title":"Simulate number of longitudinal observations — sim_n_obs","text":"Simulate number longitudinal observations","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/sim_n_obs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate number of longitudinal observations — sim_n_obs","text":"","code":"sim_n_obs(dist_n_obs, n)"},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/sim_n_obs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate number of longitudinal observations — sim_n_obs","text":"dist_n_obs distribution number longitudinal observations n number participants simulate","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/sim_n_obs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate number of longitudinal observations — sim_n_obs","text":"integer vector","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/sim_n_obs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate number of longitudinal observations — sim_n_obs","text":"","code":"dist_n_obs = tibble::tibble(n_obs = 1:5, prob = 1/5)  dist_n_obs |> sim_n_obs(n = 10) #>  [1] 4 3 2 2 2 2 3 2 4 2"},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/use_att_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Assigns column names to conform with calc_fit_mod() using attributes — use_att_names","title":"Assigns column names to conform with calc_fit_mod() using attributes — use_att_names","text":"use_att_names takes prepared longitudinal data antibody kinetic modeling names columns using attribute values allow merging modeled run_mod() output dplyr::tbl_df. column names include Subject, Iso_type, t, result.","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/use_att_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assigns column names to conform with calc_fit_mod() using attributes — use_att_names","text":"","code":"use_att_names(data)"},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/use_att_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assigns column names to conform with calc_fit_mod() using attributes — use_att_names","text":"data data.frame raw longitudinal data prepared antibody kinetic modeling using as_case_data().","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/reference/use_att_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assigns column names to conform with calc_fit_mod() using attributes — use_att_names","text":"input data.frame columns named attributes.","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/news/index.html","id":"serodynamics-development-version","dir":"Changelog","previous_headings":"","what":"serodynamics (development version)","title":"serodynamics (development version)","text":"Initial CRAN submission.","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/news/index.html","id":"new-features-development-version","dir":"Changelog","previous_headings":"","what":"New features","title":"serodynamics (development version)","text":"Added Chapter 2 fake-data simulation correlated Kronecker model (#133) Including fitted residual values data frame run_mod output. (#101) Added plot_predicted_curve() support faceting multiple IDs (#68) Replacing old data object new run_mod output (#102) Adding class assignment run_mod output (#76) Making prep_priors modifiable (#78) Taking include_subs input option, default include individuals Making single tbl output pieces attributes. jags.post now optionally included output, specified argument with_post subjects now optionally included curve_params output component, specified argument include_subs Diagnostic function produce R-hat dotplots stratification (#67) Added function summarizing estimates table (#74) Diagnostic trace plot function strat (#64) Diagnostic function produce effective sample size plots stratification (#66) Diagnostic function produce density plots stratification (#27) Added SEES data set data folder documentation (#41) Fixing SEES data added jags_post SEES (#63) as_case_data() now creates column visit_num (#47, #50) Added postprocess_jags_output() API (#33) Added initsfunction() API (#37) Added participant IDs names nsmpl element prep_data() output (#34) Added initsfunction() API (#37) Added as_case_data() API (#31) Added prep_priors() API (#30) Added autoplot() method case_data objects (#28) Added examples sim_pop_data(), autoplot.case_data() (#18) Added attributes return run_mod function (#24) exported run_mod() function (#22) Function runs jags option stratification included. (#14) Changed package name serodynamics. (#19, #20)","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/news/index.html","id":"bug-fixes-development-version","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"serodynamics (development version)","text":"None yet","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/news/index.html","id":"developer-facing-changes-development-version","dir":"Changelog","previous_headings":"","what":"Developer-facing changes","title":"serodynamics (development version)","text":"vectorized ab() function (#116) Added lintr::undesirable_function_linter() .lintr.R (#81) Reformatted .lintr R file (following https://github.com/r-lib/lintr/issues/2844#issuecomment-2776725389) (#81) Set shortcut pipe base pipe (#80) Added snapshot test run_mod() Clarified prep_data() internals using dplyr (#34) Removed “.R” suffix jags model files prevent getting linted R files (#34) Added dobson.Rmd minimal vignette (#36) Overall cleaning get checks working (#28) Added units tests prep_data(), sim_case_data() (#18) Added various GitHub Actions (#10, #15, #18)","code":""},{"path":"https:/ucd-serg.github.io/serodynamics/preview/pr133/news/index.html","id":"serodynamics-000","dir":"Changelog","previous_headings":"","what":"serodynamics 0.0.0","title":"serodynamics 0.0.0","text":"Started development.","code":""}]
